-- FUNCAO -- Sem DAO
COMMENT ON TABLE FUNCAO IS 'Cargos que uma empresa possui';
CREATE TABLE IF NOT EXISTS FUNCAO (
  CODIGO      BIGSERIAL   NOT NULL,
  NOME        VARCHAR(40) NOT NULL,
  COD_EMPRESA BIGINT      NOT NULL,
  CONSTRAINT PK_FUNCAO PRIMARY KEY (CODIGO),
  CONSTRAINT FK_FUNCAO_EMPRESA FOREIGN KEY (COD_EMPRESA)
  REFERENCES EMRPESA (CODIGO)
);

-- EMPRESA
COMMENT ON TABLE EMPRESA IS 'Empresas clientes';
CREATE TABLE IF NOT EXISTS EMPRESA (
  CODIGO BIGSERIAL    NOT NULL,
  NOME   VARCHAR(255) NOT NULL,
  CONSTRAINT PK_EMPRESA PRIMARY KEY (CODIGO)
);

-- REGIONAL
COMMENT ON TABLE REGIONAL IS 'Regionais geográficas, separando as unidades de uma empresa';
CREATE TABLE IF NOT EXISTS REGIONAL (
  CODIGO BIGSERIAL    NOT NULL,
  REGIAO VARCHAR(255) NOT NULL,
  CONSTRAINT PK_REGIONAL PRIMARY KEY (CODIGO)
);

-- PERMISSÕES
COMMENT ON TABLE PERMISSAO IS 'Permissões de acesso as Regionais / Unidades / Salas';
CREATE TABLE IF NOT EXISTS PERMISSAO (
  CODIGO    BIGINT       NOT NULL,
  PERMISSAO VARCHAR(255) NOT NULL,
  DESCRICAO VARCHAR(255) NOT NULL,
  CONSTRAINT PK_PERMISSAO PRIMARY KEY (CODIGO)
);

-- TABELA COM AS EQUIPES DE CADA UNIDADE
COMMENT ON TABLE EQUIPE IS 'Equipe de uma unidade';
CREATE TABLE IF NOT EXISTS EQUIPE (
  CODIGO      BIGSERIAL    NOT NULL,
  NOME        VARCHAR(255) NOT NULL,
  COD_UNIDADE BIGINT       NOT NULL,
  CONSTRAINT FK_EQUIPE PRIMARY KEY (CODIGO),
  CONSTRAINT FK_EQUIPE_UNIDADE FOREIGN KEY (COD_UNIDADE) REFERENCES
    UNIDADE (CODIGO)
);

-- UNIDADE -- Sem DAO
COMMENT ON TABLE UNIDADE IS 'Unidade de uma Empresa';
CREATE TABLE IF NOT EXISTS UNIDADE (
  CODIGO              BIGSERIAL   NOT NULL,
  NOME                VARCHAR(40) NOT NULL,
  TOTAL_COLABORADORES INTEGER,
  COD_REGIONAL        BIGINT      NOT NULL,
  COD_EMPRESA         BIGINT      NOT NULL,
  CONSTRAINT PK_UNIDADE PRIMARY KEY (CODIGO),
  CONSTRAINT FK_UNIDADE_REGIONAL FOREIGN KEY (COD_REGIONAL)
  REFERENCES REGIONAL (CODIGO),
  CONSTRAINT FK_UNIDADE_EMPRESA FOREIGN KEY (COD_EMPRESA)
  REFERENCES EMPRESA (CODIGO)
);

--PNEU-- RESTRICAO APLICADA NAS AFERIÇÕES
COMMENT ON TABLE EMPRESA_RESTRICAO_PNEU IS 'Parâmetros para configurar a parte de pneus';
COMMENT ON COLUMN EMPRESA_RESTRICAO_PNEU.SULCO_MINIMO_DESCARTE IS 'Sulco mínimo para descartar um pneu, utilizado quando o mesmo está na última vida';
COMMENT ON COLUMN EMPRESA_RESTRICAO_PNEU.SULCO_MINIMO_RECAPAGEM IS 'Sulco mínimo para recapar um pneu, utilizado quando o mesmo ainda não chegou na última vida';
COMMENT ON COLUMN EMPRESA_RESTRICAO_PNEU.TOLERANCIA_CALIBRAGEM IS 'Tolerância para abrir um serviço de calibragem';
COMMENT ON COLUMN EMPRESA_RESTRICAO_PNEU.TOLERANCIA_INSPECAO IS 'Tolerância para abrir um serviço de inspeção';
COMMENT ON COLUMN EMPRESA_RESTRICAO_PNEU.PERIODO_AFERICAO IS 'Período entre aferições de uma mesma placa, utilizado para montar o cronograma';
CREATE TABLE IF NOT EXISTS EMPRESA_RESTRICAO_PNEU (
  COD_EMPRESA            BIGINT NOT NULL,
  COD_UNIDADE            BIGINT NOT NULL,
  SULCO_MINIMO_DESCARTE  REAL   NOT NULL,
  SULCO_MINIMO_RECAPAGEM REAL   NOT NULL,
  TOLERANCIA_CALIBRAGEM  REAL   NOT NULL,
  TOLERANCIA_INSPECAO    REAL   NOT NULL, -- % MAX DE PSI QUE PODE PERDER ENTRE UMA AFERICAO E OUTRA, USADO PARA CRIAR O TIPOD E SERVIÇO "INSPEÇÃO"
  PERIODO_AFERICAO       INT    NOT NULL,
  CONSTRAINT PK_EMPRESA_RESTRICAO PRIMARY KEY (COD_EMPRESA, COD_UNIDADE),
  CONSTRAINT FK_EMPRESA_RESTRICAO_EMPRESA FOREIGN KEY (COD_EMPRESA)
  REFERENCES EMPRESA (CODIGO),
  CONSTRAINT FK_EMPRESA_RESTRICAO_UNIDADE FOREIGN KEY (COD_UNIDADE)
  REFERENCES UNIDADE (CODIGO)
);

-- Tabela onde são armazenados os setores que uma unidade abrange (Puxada, Distribuição, Armazém)
COMMENT ON TABLE SETOR IS 'Setores que uma unidade possui. Ex.: Administrativo, Operacional, Armazém, Puxada ...';
CREATE TABLE IF NOT EXISTS SETOR (
  CODIGO      BIGSERIAL    NOT NULL,
  COD_UNIDADE BIGINT       NOT NULL,
  NOME        VARCHAR(255) NOT NULL,
  CONSTRAINT PK_SETOR PRIMARY KEY (CODIGO, COD_UNIDADE),
  CONSTRAINT FK_SETOR_UNIDADE FOREIGN KEY (COD_UNIDADE)
  REFERENCES UNIDADE (CODIGO)
);

-- COLABORADOR
COMMENT ON TABLE COLABORADOR IS 'Cadastro dos olaboradores que utilizam o sistema';
COMMENT ON COLUMN COLABORADOR.MATRICULA_AMBEV IS 'Matrícula utilizada no sistema Promax da ambev';
COMMENT ON COLUMN COLABORADOR.MATRICULA_TRANS IS 'Matrícula utilizada no sistema do cliente';
CREATE TABLE IF NOT EXISTS COLABORADOR (
  CPF             BIGINT       NOT NULL,
  MATRICULA_AMBEV INTEGER,
  MATRICULA_TRANS INTEGER,
  DATA_NASCIMENTO DATE         NOT NULL,
  DATA_ADMISSAO   DATE         NOT NULL,
  DATA_DEMISSAO   DATE,
  STATUS_ATIVO    BOOLEAN      NOT NULL,
  NOME            VARCHAR(255) NOT NULL,
  COD_EQUIPE      BIGINT       NOT NULL,
  SETOR           VARCHAR(255) NOT NULL,
  COD_FUNCAO      INTEGER      NOT NULL,
  COD_UNIDADE     INTEGER      NOT NULL,
  COD_EMPRESA     BIGINT       NOT NULL,
  COD_PERMISSAO   BIGINT       NOT NULL,
  CONSTRAINT PK_COLABORADOR PRIMARY KEY (CPF),
  CONSTRAINT FK_COLABORADOR_FUNCAO FOREIGN KEY (COD_FUNCAO) REFERENCES
    FUNCAO (CODIGO),
  CONSTRAINT FK_COLABORADOR_EMPRESA FOREIGN KEY (COD_EMPRESA)
  REFERENCES EMPRESA (CODIGO),
  CONSTRAINT FK_COLABORADOR_UNIDADE FOREIGN KEY (COD_UNIDADE) REFERENCES
    UNIDADE (CODIGO),
  CONSTRAINT FK_COLABORADOR_PERMISSAO FOREIGN KEY (COD_PERMISSAO) REFERENCES
    PERMISSAO (CODIGO),
  CONSTRAINT FK_COLABORADOR_EQUIPE FOREIGN KEY (COD_EQUIPE) REFERENCES
    EQUIPE (CODIGO)
);

-- TREINAMENTO
COMMENT ON TABLE TREINAMENTO IS 'Treinamentos';
COMMENT ON COLUMN TREINAMENTO.DATA_LIBERACAO IS 'Data que o treinamento será disponibilizado para visualização';
CREATE TABLE IF NOT EXISTS TREINAMENTO (
  CODIGO             BIGSERIAL   NOT NULL,
  TITULO             VARCHAR(30) NOT NULL,
  DESCRICAO          TEXT        NOT NULL,
  URL_ARQUIVO        TEXT        NOT NULL,
  DATA_HORA_CADASTRO TIMESTAMP   NOT NULL,
  DATA_LIBERACAO     DATE        NOT NULL,
  COD_UNIDADE        BIGINT      NOT NULL,
  CONSTRAINT PK_TREINAMENTO PRIMARY KEY (CODIGO),
  CONSTRAINT FK_TREINAMENTO_UNIDADE FOREIGN KEY (COD_UNIDADE) REFERENCES
    UNIDADE (CODIGO)
);

-- RESTRICAO TREINAMENTO -- Sem DAO
COMMENT ON TABLE RESTRICAO_TREINAMENTO IS 'Restrições aplicadas a cada treinamento. Permite que um treinamento seja visualizado apenas por determinadas funções (cargos)';
CREATE TABLE IF NOT EXISTS RESTRICAO_TREINAMENTO (
  COD_TREINAMENTO BIGINT NOT NULL,
  COD_FUNCAO      BIGINT NOT NULL, -- funções que PODEM acessar o treinamento
  CONSTRAINT PK_RESTRICAO_TREINAMENTO PRIMARY KEY (COD_TREINAMENTO, COD_FUNCAO),
  CONSTRAINT FK_RESTRICAO_TREINAMENTO_TREINAMENTO FOREIGN KEY (COD_TREINAMENTO)
  REFERENCES TREINAMENTO (CODIGO),
  CONSTRAINT FK_RESTRICAO_TREINAMENTO_FUNCAO FOREIGN KEY (COD_FUNCAO)
  REFERENCES FUNCAO (CODIGO)
);

-- TREINAMENTO COLABORADOR -- Sem DAO
COMMENT ON TABLE TREINAMENTO_COLABORADOR IS 'Log de visualização de um treinamento';
COMMENT ON COLUMN TREINAMENTO_COLABORADOR.DATA_VISUALIZACAO IS 'Data e hora que o colaborador abriu o treinamento';
CREATE TABLE IF NOT EXISTS TREINAMENTO_COLABORADOR (
  COD_TREINAMENTO   BIGINT    NOT NULL,
  CPF_COLABORADOR   BIGINT    NOT NULL,
  DATA_VISUALIZACAO TIMESTAMP NOT NULL,
  CONSTRAINT PK_TREINAMENTO_COLABORADOR PRIMARY KEY (COD_TREINAMENTO, CPF_COLABORADOR, DATA_VISUALIZACAO),
  CONSTRAINT FK_TREINAMENTO_COLABORADOR_TREINAMENTO FOREIGN KEY (COD_TREINAMENTO)
  REFERENCES TREINAMENTO (CODIGO),
  CONSTRAINT FK_TREINAMENTO_COLABORADOR_COLABORADOR FOREIGN KEY (CPF_COLABORADOR)
  REFERENCES COLABORADOR (CPF)
);

-- RELATOS
COMMENT ON TABLE RELATO IS 'Relatos de segurança';
COMMENT ON COLUMN RELATO.DATA_HORA_LOCAL IS 'Data e hora do smartphone no momento do envio';
COMMENT ON COLUMN RELATO.DATA_HORA_DATABASE IS 'Data e hora do servidor no momento do recebimento';
COMMENT ON COLUMN RELATO.RESPOSTA_OUTROS IS 'Resposta descritiva quando a alternativa selecionada é "Outros"';
CREATE TABLE IF NOT EXISTS RELATO (
  CODIGO                  BIGSERIAL    NOT NULL,
  DATA_HORA_LOCAL         TIMESTAMP    NOT NULL,
  DATA_HORA_DATABASE      TIMESTAMP    NOT NULL,
  LATITUDE                VARCHAR(255) NOT NULL,
  LONGITUDE               VARCHAR(255) NOT NULL,
  COD_PDV                 INT,
  URL_FOTO_1              TEXT         NOT NULL,
  URL_FOTO_2              TEXT,
  URL_FOTO_3              TEXT,
  CPF_COLABORADOR         BIGINT       NOT NULL,
  CPF_CLASSIFICACAO       BIGINT,
  DATA_HORA_CLASSIFICACAO TIMESTAMP,
  CPF_FECHAMENTO          BIGINT,
  DATA_HORA_FECHAMENTO    TIMESTAMP,
  FEEDBACK_FECHAMENTO     TEXT,
  STATUS                  VARCHAR(255) NOT NULL,
  COD_UNIDADE             BIGINT       NOT NULL,
  COD_SETOR               BIGINT       NOT NULL,
  COD_ALTERNATIVA         BIGINT       NOT NULL,
  RESPOSTA_OUTROS         TEXT,
  CONSTRAINT PK_RELATO PRIMARY KEY (CODIGO),
  CONSTRAINT FK_RELATO_COLABORADOR FOREIGN KEY (CPF_COLABORADOR)
  REFERENCES COLABORADOR (CPF),
  CONSTRAINT FK_RELATO_COLABORADOR_CLASSIFICACAO FOREIGN KEY (CPF_CLASSIFICACAO)
  REFERENCES COLABORADOR (CPF),
  CONSTRAINT FK_RELATO_COLABORADOR_FECHAMENTO FOREIGN KEY (CPF_FECHAMENTO)
  REFERENCES COLABORADOR (CPF),
  CONSTRAINT FK_RELATO_RELATO_ALTERNATIVA FOREIGN KEY (COD_ALTERNATIVA, COD_UNIDADE)
  REFERENCES RELATO_ALTERNATIVA (CODIGO, COD_UNIDADE),
  CONSTRAINT FK_RELATO_UNIDADE FOREIGN KEY (COD_UNIDADE)
  REFERENCES UNIDADE (CODIGO),
  CONSTRAINT FK_RELATO_SETOR FOREIGN KEY (COD_SETOR, COD_UNIDADE)
  REFERENCES SETOR (CODIGO, COD_UNIDADE)
);

ALTER TABLE relato ALTER COLUMN url_foto_2 DROP NOT NULL;
ALTER TABLE relato ALTER COLUMN url_foto_3 DROP NOT NULL;

-- FALE CONOSCO
COMMENT ON TABLE FALE_CONOSCO IS 'Fale conosco enviados pelos colaboradores';
COMMENT ON COLUMN FALE_CONOSCO.CPF_FEEDBACK IS 'Cpf do colaborador que respondeu ao fale conosco';
COMMENT ON COLUMN FALE_CONOSCO.DATA_HORA_FEEDBACK IS 'Data e hora que foi realizado o feedback';
COMMENT ON COLUMN FALE_CONOSCO.FEEDBACK IS 'Retorno do conteúdo do fale conosco';
COMMENT ON COLUMN FALE_CONOSCO.STATUS IS 'Status que um fale conosco pode possuir (pendente ou respondido)';
COMMENT ON COLUMN FALE_CONOSCO.CATEGORIA IS 'Categoria que o fale conosco pode pertencer (sugestão ou reclamação)';
CREATE TABLE IF NOT EXISTS FALE_CONOSCO (
  CODIGO             BIGSERIAL    NOT NULL,
  COD_UNIDADE        BIGINT       NOT NULL,
  DATA_HORA          TIMESTAMP    NOT NULL,
  DESCRICAO          TEXT         NOT NULL,
  CATEGORIA          VARCHAR(255) NOT NULL,
  CPF_COLABORADOR    BIGINT       NOT NULL,
  DATA_HORA_FEEDBACK TIMESTAMP,
  CPF_FEEDBACK       BIGINT,
  FEEDBACK           TEXT,
  STATUS             VARCHAR(255),
  CONSTRAINT PK_FALE_CONOSCO PRIMARY KEY (CODIGO, COD_UNIDADE),
  CONSTRAINT FK_FALE_CONOSCO_COLABORADOR FOREIGN KEY (CPF_COLABORADOR)
  REFERENCES COLABORADOR (CPF),
  CONSTRAINT FK_FALE_CONOSCO_UNIDADE FOREIGN KEY (COD_UNIDADE)
  REFERENCES UNIDADE (CODIGO),
  CONSTRAINT FK_FALE_CONOSCO_COLABORADOR_FEEDBACK FOREIGN KEY (CPF_FEEDBACK)
  REFERENCES COLABORADOR (CPF)
);

-- UNIDADE FUNCAO -- Sem DAO
COMMENT ON TABLE UNIDADE_FUNCAO IS 'Relação entre unidade e função (cargo), lista todas as funções que uma unidade possui';
CREATE TABLE IF NOT EXISTS UNIDADE_FUNCAO (
  COD_FUNCAO  INTEGER NOT NULL,
  COD_UNIDADE INTEGER NOT NULL,
  CONSTRAINT PK_UNIDADE_FUNCAO PRIMARY KEY (COD_FUNCAO, COD_UNIDADE),
  CONSTRAINT FK_UNIDADE_FUNCAO_FUNCAO FOREIGN KEY (COD_FUNCAO) REFERENCES
    FUNCAO (CODIGO),
  CONSTRAINT FK_UNIDADE_FUNCAO_UNIDADE FOREIGN KEY (COD_UNIDADE) REFERENCES
    UNIDADE (CODIGO)
);

-- TIPOS DE VEICULO VINCULADOS A UMA UNIDADE (TRUCK, TOCO, CARRETA, TRUCK BAU...)
COMMENT ON TABLE VEICULO_TIPO IS 'Tipos de veículo Ex.: Truck, Toco, Carreta ...';
CREATE TABLE IF NOT EXISTS VEICULO_TIPO (
  CODIGO       BIGSERIAL    NOT NULL,
  COD_UNIDADE  BIGINT       NOT NULL,
  NOME         VARCHAR(255) NOT NULL,
  STATUS_ATIVO BOOLEAN      NOT NULL,
  COD_DIAGRAMA SMALLINT,
  CONSTRAINT PK_VEICULO_TIPO PRIMARY KEY (CODIGO, COD_UNIDADE),
  CONSTRAINT FK_VEICULO_TIPO_UNIDADE FOREIGN KEY (COD_UNIDADE)
  REFERENCES UNIDADE (CODIGO),
  CONSTRAINT FK_VEICULO_TIPO_VEICULO_DIAGRAMA FOREIGN KEY (COD_DIAGRAMA)
  REFERENCES VEICULO_DIAGRAMA (CODIGO)
);

ALTER TABLE VEICULO_TIPO ADD COLUMN COD_DIAGRAMA SMALLINT;
ALTER TABLE VEICULO_TIPO ADD CONSTRAINT FK_VEICULO_TIPO_VEICULO_DIAGRAMA FOREIGN KEY (COD_DIAGRAMA)
REFERENCES VEICULO_DIAGRAMA(CODIGO);

--PNEU--MARCA FABRICANTE VEICULO
COMMENT ON TABLE MARCA_VEICULO IS 'Marca do veículo Ex.: Scania, Volvo, VW ...';
CREATE TABLE IF NOT EXISTS MARCA_VEICULO (
  CODIGO BIGSERIAL    NOT NULL,
  NOME   VARCHAR(255) NOT NULL,
  CONSTRAINT PK_MARCA_VEICULO PRIMARY KEY (CODIGO)
);

--PNEU--MODELO VEICULO
COMMENT ON TABLE MODELO_VEICULO IS 'Modelo do veículo Ex.: 24220, Titan, 17180 ...';
CREATE TABLE IF NOT EXISTS MODELO_VEICULO (
  CODIGO      BIGSERIAL    NOT NULL,
  COD_EMPRESA BIGINT       NOT NULL,
  NOME        VARCHAR(255) NOT NULL,
  COD_MARCA   BIGINT       NOT NULL,
  CONSTRAINT PK_MODELO_VEICULO PRIMARY KEY (CODIGO),
  CONSTRAINT FK_MODELO_VEICULO_MARCA_VEICULO FOREIGN KEY (COD_MARCA)
  REFERENCES MARCA_VEICULO (CODIGO),
  CONSTRAINT FK_MODELO_VEICULO_EMPRESA FOREIGN KEY (COD_EMPRESA)
  REFERENCES EMPRESA (CODIGO)
);

--PNEU--EIXOS DE UM VEICULO
COMMENT ON TABLE EIXOS_VEICULO IS 'Tipos de carrocerias e suas quantidades de eixos';
COMMENT ON COLUMN EIXOS_VEICULO.DIANTEIRO IS 'Quantidade de eixos dianteiros';
COMMENT ON COLUMN EIXOS_VEICULO.TRASEIRO IS 'Quantidade de eixos traseiros';
CREATE TABLE IF NOT EXISTS EIXOS_VEICULO (
  CODIGO    BIGSERIAL    NOT NULL,
  NOME      VARCHAR(255) NOT NULL,
  DIANTEIRO INTEGER      NOT NULL,
  TRASEIRO  INTEGER      NOT NULL,
  CONSTRAINT PK_EIXOS_VEICULO PRIMARY KEY (CODIGO)
);

-- VEICULO -- TALVEZ SEJA MELHOR CRIAR TABELA UNIDADE_VEICULO CONTENDO OS VEICULOS
-- DE CADA UNIDADE. NÃO FAZ SENTIDO TER COD_UNIDADE EM VEICULO
COMMENT ON TABLE VEICULO IS 'Veículos';
COMMENT ON COLUMN VEICULO.STATUS_ATIVO IS 'Flag que indica se o veículo está ativo ou não';
CREATE TABLE IF NOT EXISTS VEICULO (
  PLACA        VARCHAR(7) NOT NULL,
  COD_MODELO   BIGINT     NOT NULL,
  COD_UNIDADE  INTEGER    NOT NULL,
  COD_EIXOS    BIGINT     NOT NULL,
  COD_TIPO     BIGINT     NOT NULL,
  KM           BIGINT,
  STATUS_ATIVO BOOLEAN    NOT NULL,
  CONSTRAINT PK_PLACA PRIMARY KEY (PLACA),
  CONSTRAINT FK_PLACA_UNIDADE FOREIGN KEY (COD_UNIDADE) REFERENCES
    UNIDADE (CODIGO),
  CONSTRAINT FK_VEICULO_MODELO_VEICULO FOREIGN KEY (COD_MODELO) REFERENCES
    MODELO_VEICULO (CODIGO),
  CONSTRAINT FK_VEICULO_EIXOS_VEICULO FOREIGN KEY (COD_EIXOS) REFERENCES
    EIXOS_VEICULO (CODIGO),
  CONSTRAINT FK_VEICULO_VEICULO_TIPO FOREIGN KEY (COD_UNIDADE, COD_TIPO)
  REFERENCES VEICULO_TIPO (COD_UNIDADE, CODIGO)
);

--PNEU--MARCA PNEU
COMMENT ON TABLE MARCA_PNEU IS 'Marca do pneu Ex.: Michelin, Bridgestone ...';
CREATE TABLE IF NOT EXISTS MARCA_PNEU (
  CODIGO BIGSERIAL    NOT NULL,
  NOME   VARCHAR(255) NOT NULL,
  CONSTRAINT PK_MARCA_PNEU PRIMARY KEY (CODIGO)
);

--PNEU--MODELO PNEU
COMMENT ON TABLE MODELO_PNEU IS 'Modelo do pneu Ex.: G685, HSR ...';
CREATE TABLE IF NOT EXISTS MODELO_PNEU (
  CODIGO      BIGSERIAL    NOT NULL,
  COD_EMPRESA BIGINT       NOT NULL,
  NOME        VARCHAR(255) NOT NULL,
  COD_MARCA   BIGINT       NOT NULL,
  QT_SULCOS   SMALLINT     NOT NULL,
  CONSTRAINT PK_MODELO_PNEU PRIMARY KEY (CODIGO),
  CONSTRAINT FK_MODELO_PNEU_MARCA_PNEU FOREIGN KEY (COD_MARCA)
  REFERENCES MARCA_PNEU (CODIGO),
  CONSTRAINT FK_MODELO_PNEU_EMPRESA FOREIGN KEY (COD_EMPRESA)
  REFERENCES EMPRESA (CODIGO)
);

ALTER TABLE MODELO_PNEU ADD COLUMN QT_SULCOS SMALLINT NOT NULL DEFAULT 4;


--PNEU--MARCA BANDA
COMMENT ON TABLE MARCA_BANDA IS 'Marca da banda Ex.: Tipler, Vipal ...';
CREATE TABLE IF NOT EXISTS MARCA_BANDA (
  CODIGO      BIGSERIAL    NOT NULL,
  NOME        VARCHAR(255) NOT NULL,
  COD_EMPRESA BIGINT       NOT NULL,
  CONSTRAINT PK_MARCA_BANDA PRIMARY KEY (CODIGO, COD_EMPRESA),
  CONSTRAINT FK_MARCA_BANDA_EMPRESA FOREIGN KEY (COD_EMPRESA)
  REFERENCES EMPRESA (CODIGO),
  CONSTRAINT UNIQUE_MARCA_BANDA UNIQUE (COD_EMPRESA, NOME)
);

--PNEU--MODELO BANDA
COMMENT ON TABLE MODELO_BANDA IS 'Modelo da banda Ex.: G685, HSR ...';
CREATE TABLE IF NOT EXISTS MODELO_BANDA (
  CODIGO      BIGSERIAL    NOT NULL,
  NOME        VARCHAR(255) NOT NULL,
  COD_MARCA   BIGINT       NOT NULL,
  COD_EMPRESA BIGINT       NOT NULL,
  QT_SULCOS   SMALLINT     NOT NULL,
  CONSTRAINT PK_MODELO_BANDA PRIMARY KEY (CODIGO),
  CONSTRAINT FK_MODELO_BANDA_MARCA_BANDA FOREIGN KEY (COD_MARCA, COD_EMPRESA)
  REFERENCES MARCA_BANDA (CODIGO, COD_EMPRESA),
  CONSTRAINT FK_MODELO_BANDA_EMPRESA FOREIGN KEY (COD_EMPRESA)
  REFERENCES EMPRESA (CODIGO),
  CONSTRAINT UNIQUE_MODELO_BANDA UNIQUE (COD_EMPRESA, COD_MARCA, NOME)
);

ALTER TABLE MODELO_BANDA ADD COLUMN QT_SULCOS SMALLINT NOT NULL DEFAULT 4;

-- Tabela que irá armazenar o valor de cada vida do pneu, desde quando comprado (vida = 1) até o último recape
-- tabela extremamente importante para gerar relatórios de custo por km
CREATE TABLE IF NOT EXISTS PNEU_VALOR_VIDA (
  COD_UNIDADE      BIGINT NOT NULL,
  COD_PNEU         BIGINT NOT NULL,
  COD_MODELO_BANDA BIGINT,
  VIDA             INT    NOT NULL,
  VALOR            REAL   NOT NULL,
  CONSTRAINT PK_PNEU_VALOR_VIDA PRIMARY KEY (COD_UNIDADE, COD_PNEU, VIDA),
  CONSTRAINT FK_PNEU_VALOR_VIDA_UNIDADE FOREIGN KEY (COD_UNIDADE)
  REFERENCES UNIDADE (CODIGO),
  CONSTRAINT FK_PNEU_VALOR_VIDA_MODELO_BANDA FOREIGN KEY (COD_MODELO_BANDA)
  REFERENCES MODELO_BANDA (CODIGO),
  CONSTRAINT FK_PNEU_VALOR_VIDA_PNEU FOREIGN KEY (COD_UNIDADE, COD_PNEU)
  REFERENCES PNEU (COD_UNIDADE, CODIGO)
);
ALTER TABLE PNEU_VALOR_VIDA ALTER COLUMN TYPE COD_PNEU VARCHAR(255);

-- após inserir as tabelas marca e modelo banda deve-se editar a tabela pneu.
ALTER TABLE pneu
  ADD COLUMN COD_MODELO_BANDA BIGINT;
ALTER TABLE pneu
  ADD CONSTRAINT FK_PNEU_MODELO_BANDA FOREIGN KEY (COD_MODELO_BANDA)
REFERENCES MODELO_BANDA (CODIGO);

--PNEU-- OBJETO PNEU
COMMENT ON TABLE DIMENSAO_PNEU IS 'Dimensão (ou medidas) do pneu Ex.: 195/50 R15  195 = largura | 50 = altura | 15 = aro';
CREATE TABLE IF NOT EXISTS DIMENSAO_PNEU (
  CODIGO  BIGSERIAL NOT NULL,
  ALTURA  INTEGER   NOT NULL,
  LARGURA INTEGER   NOT NULL,
  ARO     REAL      NOT NULL,
  CONSTRAINT PK_DIMENSAO_PNEU PRIMARY KEY (CODIGO)
);

--PNEU--PNEU
COMMENT ON TABLE PNEU IS 'Pneu';
COMMENT ON COLUMN PNEU.PRESSAO_RECOMENDADA IS 'Pressão recomendada pelo fabricante ou pela unidade';
COMMENT ON COLUMN PNEU.ALTURA_SULCOS_NOVOS IS 'Altura dos sulcos quando o pneu é novo, em milímetros';
COMMENT ON COLUMN PNEU.VIDA_ATUAL IS 'Vida atual que o pneu se encontra';
COMMENT ON COLUMN PNEU.VIDA_TOTAL IS 'Vidas que o cliente pretende rodar com o pneu';
COMMENT ON COLUMN PNEU.STATUS IS 'Status atual do pneu, pode ser: estoque, em_uso, descarte ou recapagem';
CREATE TABLE IF NOT EXISTS PNEU (
  CODIGO               BIGINT       NOT NULL,
  COD_MODELO           BIGINT       NOT NULL,
  COD_MODELO_BANDA     BIGINT,
  COD_DIMENSAO         BIGINT       NOT NULL,
  PRESSAO_RECOMENDADA  REAL         NOT NULL,
  PRESSAO_ATUAL        REAL,
  ALTURA_SULCOS_NOVOS  REAL         NOT NULL,
  ALTURA_SULCO_INTERNO REAL,
  ALTURA_SULCO_CENTRAL_INTERNO REAL,
  ALTURA_SULCO_CENTRAL_EXTERNO REAL,
  ALTURA_SULCO_EXTERNO REAL,
  VIDA_ATUAL           INT          NOT NULL,
  VIDA_TOTAL           INT          NOT NULL,
  COD_UNIDADE          BIGINT       NOT NULL,
  STATUS               VARCHAR(255) NOT NULL,
  VALOR                REAL         NOT NULL,
  CONSTRAINT PK_PNEU PRIMARY KEY (CODIGO, COD_UNIDADE),
  CONSTRAINT FK_PNEU_MODELO FOREIGN KEY (COD_MODELO)
  REFERENCES MODELO_PNEU (CODIGO),
  CONSTRAINT FK_PNEU_DIMENSAO FOREIGN KEY (COD_DIMENSAO)
  REFERENCES DIMENSAO_PNEU (CODIGO),
  CONSTRAINT FK_PNEU_UNIDADE FOREIGN KEY (COD_UNIDADE)
  REFERENCES UNIDADE (CODIGO),
  CONSTRAINT FK_PNEU_MODELO_BANDA FOREIGN KEY (COD_MODELO_BANDA)
  REFERENCES MODELO_BANDA (CODIGO)
);

ALTER TABLE pneu RENAME COLUMN altura_sulco_central TO altura_sulco_central_interno;
ALTER TABLE pneu ADD COLUMN altura_sulco_central_externo REAL;
UPDATE pneu SET altura_sulco_central_externo = altura_sulco_central_interno;
ALTER TABLE pneu ADD COLUMN valor REAL NOT NULL;

--PNEU--RELAÇÃO ENTRE VEICULO E PNEU, INDICA QUAIS PNEUS ESTÃO INSTALADOS EM CADA VEICULO
COMMENT ON TABLE VEICULO_PNEU IS 'Víncula pneus ao veiculo';
COMMENT ON COLUMN VEICULO_PNEU.POSICAO IS 'Posição que o pneu se encontra no veículo';
CREATE TABLE IF NOT EXISTS VEICULO_PNEU (
  PLACA       VARCHAR(255) NOT NULL,
  COD_PNEU    BIGINT       NOT NULL,
  COD_UNIDADE BIGINT       NOT NULL,
  POSICAO     INTEGER      NOT NULL,
  UNIQUE (PLACA, POSICAO),
  CONSTRAINT PK_VEICULO_PNEU PRIMARY KEY (PLACA, COD_PNEU),
  CONSTRAINT FK_VEICULO_PNEU_PNEU FOREIGN KEY (COD_PNEU, COD_UNIDADE)
  REFERENCES PNEU (CODIGO, COD_UNIDADE),
  CONSTRAINT FK_VEICULO_PNEU_VEICULO FOREIGN KEY (PLACA)
  REFERENCES VEICULO (PLACA)
);
ALTER TABLE VEICULO_PNEU ALTER COLUMN COD_PNEU TYPE VARCHAR(255);

--PNEU--AFERIÇÃO
COMMENT ON TABLE AFERICAO IS 'Aferição - Coleta dos dados de sulcos e pressão de cada pneu de um veículo';
COMMENT ON COLUMN AFERICAO.PLACA_VEICULO IS 'Placa do veículo aferido';
COMMENT ON COLUMN AFERICAO.KM_VEICULO IS 'Km do veículo no momento da aferição';
COMMENT ON COLUMN AFERICAO.TEMPO_REALIZACAO IS 'Tempo que a aferição de todos os pneus levou';
COMMENT ON COLUMN AFERICAO.CPF_AFERIDOR IS 'Colaborador que realizou a aferição';
CREATE TABLE IF NOT EXISTS AFERICAO (
  CODIGO           BIGSERIAL    NOT NULL,
  DATA_HORA        TIMESTAMP    NOT NULL,
  PLACA_VEICULO    VARCHAR(255) NOT NULL,
  CPF_AFERIDOR     BIGINT       NOT NULL,
  KM_VEICULO       BIGINT       NOT NULL,
  TEMPO_REALIZACAO BIGINT,
  CONSTRAINT PK_AFERICAO PRIMARY KEY (CODIGO),
  CONSTRAINT FK_AFERICAO_VEICULO FOREIGN KEY (PLACA_VEICULO)
  REFERENCES VEICULO (PLACA),
  CONSTRAINT FK_AFERICAO_COLABORADOR FOREIGN KEY (CPF_AFERIDOR)
  REFERENCES COLABORADOR (CPF)
);

--PNEU--VALORES DE UMA AFERICAO
COMMENT ON TABLE AFERICAO_VALORES IS 'Valores coletados nas aferições';
COMMENT ON COLUMN AFERICAO_VALORES.ALTURA_SULCO_CENTRAL IS 'Altura coletada do sulco central';
COMMENT ON COLUMN AFERICAO_VALORES.ALTURA_SULCO_EXTERNO IS 'Altura coletada do sulco externo';
COMMENT ON COLUMN AFERICAO_VALORES.ALTURA_SULCO_INTERNO IS 'Altura coletada do sulco interno';
COMMENT ON COLUMN AFERICAO_VALORES.PSI IS 'Pressão coletada';
COMMENT ON COLUMN AFERICAO_VALORES.VIDA_MOMENTO_AFERICAO IS 'Vida do pneu no momento da aferição';
CREATE TABLE IF NOT EXISTS AFERICAO_VALORES (
  COD_AFERICAO          BIGINT NOT NULL,
  COD_PNEU              BIGINT NOT NULL,
  COD_UNIDADE           BIGINT NOT NULL,
  ALTURA_SULCO_INTERNO  REAL,
  ALTURA_SULCO_CENTRAL_INTERNO  REAL,
  ALTURA_SULCO_CENTRAL_EXTERNO  REAL,
  ALTURA_SULCO_EXTERNO  REAL,
  PSI                   REAL   NOT NULL,
  POSICAO               INT,
  VIDA_MOMENTO_AFERICAO INT    NOT NULL,
  CONSTRAINT PK_AFERICAO_VALORES PRIMARY KEY (COD_AFERICAO, COD_PNEU),
  CONSTRAINT FK_AFERICAO_VALORES_AFERICAO FOREIGN KEY (COD_AFERICAO)
  REFERENCES AFERICAO (CODIGO) ON DELETE CASCADE,
  CONSTRAINT FK_AFERICAO_VALORES_PNEU FOREIGN KEY (COD_PNEU, COD_UNIDADE)
  REFERENCES PNEU (CODIGO, COD_UNIDADE)
);
ALTER TABLE AFERICAO_VALORES ALTER COLUMN COD_PNEU TYPE VARCHAR(255);

ALTER TABLE afericao_valores RENAME COLUMN altura_sulco_central TO altura_sulco_central_interno;
ALTER TABLE afericao_valores ADD COLUMN altura_sulco_central_externo REAL;

-- MODELOS DE CHECKLISTS
COMMENT ON TABLE CHECKLIST_MODELO IS 'Modelos de checklist';
CREATE TABLE IF NOT EXISTS CHECKLIST_MODELO (
  COD_UNIDADE  BIGINT       NOT NULL,
  CODIGO       BIGSERIAL    NOT NULL,
  NOME         VARCHAR(255) NOT NULL,
  STATUS_ATIVO BOOLEAN      NOT NULL,
  CONSTRAINT PK_CHECKLIST_MODELO PRIMARY KEY (COD_UNIDADE, CODIGO),
  CONSTRAINT FK_CHECKLIST_MODELO_UNIDADE FOREIGN KEY (COD_UNIDADE)
  REFERENCES UNIDADE (CODIGO)
);

-- TIPOS DE VEICULOS ASSOCIADOS A UM MODELO DE CHECKLIST
COMMENT ON TABLE CHECKLIST_MODELO_VEICULO_TIPO IS 'Relaciona tipos de veículo a um modelo de checklist';
CREATE TABLE IF NOT EXISTS CHECKLIST_MODELO_VEICULO_TIPO (
  COD_UNIDADE      BIGINT NOT NULL,
  COD_MODELO       BIGINT NOT NULL,
  COD_TIPO_VEICULO BIGINT NOT NULL,
  CONSTRAINT PK_CHECKLIST_MODELO_VEICULO_TIPO PRIMARY KEY (COD_UNIDADE, COD_MODELO, COD_TIPO_VEICULO),
  CONSTRAINT FK_CHECKLIST_MODELO_VEICULO_TIPO_UNIDADE FOREIGN KEY (COD_UNIDADE)
  REFERENCES UNIDADE (CODIGO),
  CONSTRAINT FK_CHECKLIST_MODELO_VEICULO_TIPO_CHECKLIST_MODELO FOREIGN KEY (COD_UNIDADE, COD_MODELO)
  REFERENCES CHECKLIST_MODELO (COD_UNIDADE, CODIGO),
  CONSTRAINT FK_CHECKLIST_MODELO_CHECKLIST_VEICULO_TIPO FOREIGN KEY (COD_UNIDADE, COD_TIPO_VEICULO)
  REFERENCES VEICULO_TIPO (COD_UNIDADE, CODIGO)
);

-- ASSOCIA UM MODELO DE CHECK A UMA OU MAIS FUNÇÕES
COMMENT ON TABLE CHECKLIST_MODELO_FUNCAO IS 'Relaciona funções (cargos) a um modelo de checklist';
CREATE TABLE IF NOT EXISTS CHECKLIST_MODELO_FUNCAO (
  COD_UNIDADE          BIGINT NOT NULL,
  COD_CHECKLIST_MODELO BIGINT NOT NULL,
  COD_FUNCAO           BIGINT NOT NULL,
  CONSTRAINT PK_CHECKLIST_MODELO_FUNCAO PRIMARY KEY (COD_UNIDADE, COD_CHECKLIST_MODELO, COD_FUNCAO),
  CONSTRAINT FK_CHECKLIST_MODELO_FUNCAO_MODELO FOREIGN KEY (COD_UNIDADE, COD_CHECKLIST_MODELO)
  REFERENCES CHECKLIST_MODELO (COD_UNIDADE, CODIGO),
  CONSTRAINT FK_CHECKLIST_MODELO_UNIDADE_FUNCAO FOREIGN KEY (COD_UNIDADE, COD_FUNCAO)
  REFERENCES UNIDADE_FUNCAO (COD_UNIDADE, COD_FUNCAO)
);

-- CHECKLIST SAIDA/RETORNO
COMMENT ON TABLE CHECKLIST IS 'Checklist';
COMMENT ON COLUMN CHECKLIST.TIPO IS 'Tipo do checklist realizado, podendo ser saída ou retorno';
COMMENT ON COLUMN CHECKLIST.TEMPO_REALIZACAO IS 'Tempo de realização do checklist';
CREATE TABLE IF NOT EXISTS CHECKLIST (
  COD_UNIDADE          BIGINT     NOT NULL,
  COD_CHECKLIST_MODELO BIGINT     NOT NULL,
  CODIGO               BIGSERIAL  NOT NULL,
  DATA_HORA            TIMESTAMP  NOT NULL,
  CPF_COLABORADOR      BIGINT     NOT NULL,
  PLACA_VEICULO        VARCHAR(7) NOT NULL,
  TIPO                 CHAR(1),
  TEMPO_REALIZACAO     BIGINT,
  KM_VEICULO           BIGINT,
  CONSTRAINT PK_CHECKLIST PRIMARY KEY (CODIGO),
  CONSTRAINT FK_CHECKLIST_COLABORADOR FOREIGN KEY (CPF_COLABORADOR)
  REFERENCES COLABORADOR (CPF),
  CONSTRAINT FK_CHECKLIST_PLACA FOREIGN KEY (PLACA_VEICULO)
  REFERENCES VEICULO (PLACA),
  CONSTRAINT FK_CHECKLIST_UNIDADE FOREIGN KEY (COD_UNIDADE)
  REFERENCES UNIDADE (CODIGO),
  CONSTRAINT FK_CHECKLIST_CHECKLIST_MODELO FOREIGN KEY (COD_UNIDADE, COD_CHECKLIST_MODELO)
  REFERENCES CHECKLIST_MODELO (COD_UNIDADE, CODIGO)
);

-- PERGUNTAS DO CHECKLIST DE SAÍDA/RETORNO -- Sem DAO
COMMENT ON TABLE CHECKLIST_PERGUNTAS IS 'Perguntas de um checklist';
COMMENT ON COLUMN CHECKLIST_PERGUNTAS.ORDEM IS 'Ordem que a pergunta deve aparecer no checklist';
COMMENT ON COLUMN CHECKLIST_PERGUNTAS.PRIORIDADE IS 'Prioridade da pergunta, podendo ser alta, média ou baixa';
COMMENT ON COLUMN CHECKLIST_PERGUNTAS.SINGLE_CHOICE IS 'Tipo da pergunta, podendo ser de única ou múltipla escolha';
COMMENT ON COLUMN CHECKLIST_PERGUNTAS.URL_IMAGEM IS 'Imagem a ser exibida';
COMMENT ON COLUMN CHECKLIST_PERGUNTAS.PERGUNTA IS 'Pergunta';
CREATE TABLE IF NOT EXISTS CHECKLIST_PERGUNTAS (
  COD_CHECKLIST_MODELO BIGINT       NOT NULL,
  COD_UNIDADE          BIGINT       NOT NULL,
  CODIGO               BIGSERIAL    NOT NULL,
  ORDEM                INT          NOT NULL,
  PERGUNTA             TEXT         NOT NULL,
  URL_IMAGEM           TEXT,
  STATUS_ATIVO         BOOLEAN      NOT NULL,
  PRIORIDADE           VARCHAR(255) NOT NULL,
  SINGLE_CHOICE        BOOLEAN      NOT NULL,
  CONSTRAINT PK_CHECKLIST_PERGUNTAS PRIMARY KEY (COD_UNIDADE, COD_CHECKLIST_MODELO, CODIGO),
  CONSTRAINT FK_CHECKLIST_PERGUNTAS_CHECKLIST_MODELO FOREIGN KEY (COD_UNIDADE, COD_CHECKLIST_MODELO)
  REFERENCES CHECKLIST_MODELO (COD_UNIDADE, CODIGO),
  CONSTRAINT FK_CHECKLIST_PERGUNTAS_UNIDADE FOREIGN KEY (COD_UNIDADE)
  REFERENCES UNIDADE (CODIGO)
);

-- ALTERNATIVAS DE RESPOSTA PARA CADA PERGUNTA DE UM CHECKLIST
COMMENT ON TABLE CHECKLIST_ALTERNATIVA_PERGUNTA IS 'Alternativas de uma pergunta do checklist';
COMMENT ON COLUMN CHECKLIST_ALTERNATIVA_PERGUNTA.ORDEM IS 'Ordem que a alternativa deve ser exibida dentro da pergunta';
CREATE TABLE IF NOT EXISTS CHECKLIST_ALTERNATIVA_PERGUNTA (
  COD_CHECKLIST_MODELO BIGINT    NOT NULL,
  COD_UNIDADE          BIGINT    NOT NULL,
  COD_PERGUNTA         BIGINT    NOT NULL,
  CODIGO               BIGSERIAL NOT NULL,
  ALTERNATIVA          TEXT      NOT NULL,
  ORDEM                INT       NOT NULL,
  STATUS_ATIVO         BOOLEAN   NOT NULL,
  CONSTRAINT PK_CHECKLIST_ALTERNATIVA_PERGUNTA PRIMARY KEY (COD_UNIDADE, COD_CHECKLIST_MODELO, COD_PERGUNTA, CODIGO),
  CONSTRAINT FK_CHECKLIST_ALTERNATIVA_PERGUNTA_PERGUNTA FOREIGN KEY (COD_UNIDADE, COD_CHECKLIST_MODELO, COD_PERGUNTA)
  REFERENCES CHECKLIST_PERGUNTAS (COD_UNIDADE, COD_CHECKLIST_MODELO, CODIGO),
  CONSTRAINT FK_CHECKLIST_ALTERNATIVA_PERGUNTA_UNIDADE FOREIGN KEY (COD_UNIDADE)
  REFERENCES UNIDADE (CODIGO)
);

-- RESPOSTAS DO CHECKLIST DE SAÍDA/RETORNO Sem DAO
COMMENT ON TABLE CHECKLIST_RESPOSTAS IS 'Respostas de um checklist';
COMMENT ON COLUMN CHECKLIST_RESPOSTAS.RESPOSTA IS 'Resposta descritiva caso a alternativa selecionada seja = Outros';
CREATE TABLE IF NOT EXISTS CHECKLIST_RESPOSTAS (
  COD_CHECKLIST_MODELO BIGINT NOT NULL,
  COD_UNIDADE          BIGINT NOT NULL,
  COD_CHECKLIST        BIGINT NOT NULL,
  COD_PERGUNTA         BIGINT NOT NULL,
  COD_ALTERNATIVA      BIGINT NOT NULL,
  RESPOSTA             TEXT   NOT NULL,
  CONSTRAINT PK_CHECKLIST_RESPOSTAS PRIMARY KEY (COD_UNIDADE, COD_CHECKLIST_MODELO, COD_CHECKLIST,
                                                 COD_PERGUNTA, COD_ALTERNATIVA),
  CONSTRAINT FK_CHECKLIST_RESPOSTAS_CHECKLIST FOREIGN KEY (COD_CHECKLIST)
  REFERENCES CHECKLIST (CODIGO),
  CONSTRAINT FK_CHECKLIST_RESPOSTAS_ALTERNATIVA_PERGUNTA FOREIGN KEY (COD_UNIDADE, COD_CHECKLIST_MODELO,
                                                                      COD_PERGUNTA, COD_ALTERNATIVA)
  REFERENCES CHECKLIST_ALTERNATIVA_PERGUNTA (COD_UNIDADE, COD_CHECKLIST_MODELO, COD_PERGUNTA, CODIGO)
);

--PRIORIDADE DAS PERGUNTAS SEGUNDO O DPO
COMMENT ON TABLE PRIORIDADE_PERGUNTA_CHECKLIST IS 'Prioridade da pergunta, podendo ser alta, média ou baixa';
COMMENT ON COLUMN PRIORIDADE_PERGUNTA_CHECKLIST.PRAZO IS 'Prazo para resolução do item. Armazenado em horas';
CREATE TABLE IF NOT EXISTS PRIORIDADE_PERGUNTA_CHECKLIST (
  PRIORIDADE VARCHAR(255) NOT NULL,
  PRAZO      INTEGER      NOT NULL,
  CONSTRAINT PK_PRIORIDADE_PERGUNTA_CHECKLIST PRIMARY KEY (PRIORIDADE)
);

-- Mapas -- Sem DAO
COMMENT ON TABLE MAPA IS 'Mapas coletados da planilha ambev (2art). Contém todos os dados necessários para geração dos indicadores, produtividade, relatórios ...';
CREATE TABLE IF NOT EXISTS MAPA (
  Data                           DATE,
  Transp                         INTEGER,
  Entrega                        VARCHAR(20),
  CargaAtual                     VARCHAR(20),
  Frota                          VARCHAR(20),
  CustoSpot                      REAL,
  Regiao                         INTEGER,
  Veiculo                        INTEGER,
  Placa                          VARCHAR(7),
  VeiculoIndisp                  REAL,
  PlacaIndisp                    REAL,
  FrotaIndisp                    REAL,
  TipoIndisp                     INTEGER,
  Mapa                           INTEGER NOT NULL,
  Entregas                       INTEGER,
  CxCarreg                       REAL,
  CxEntreg                       REAL,
  Ocupacao                       REAL,
  CxRota                         REAL,
  CxAS                           REAL,
  VeicBM                         REAL,
  RShow                          INTEGER,
  EntrVol                        VARCHAR(20),
  HrSai                          TIMESTAMP,
  HrEntr                         TIMESTAMP,
  KmSai                          INTEGER,
  KmEntr                         INTEGER,
  CustoVariavel                  REAL,
  Lucro                          REAL,
  LucroUnit                      REAL,
  ValorFrete                     REAL,
  TipoImposto                    VARCHAR(20),
  PercImposto                    REAL,
  ValorImposto                   REAL,
  ValorFaturado                  REAL,
  ValorUnitCxEntregue            REAL,
  ValorPgCxEntregSemImp          REAL,
  ValorPgCxEntregComImp          REAL,
  TempoPrevistoRoad              TIME,
  KmPrevistoRoad                 REAL,
  ValorUnitPontoMot              REAL,
  ValorUnitPontoAjd              REAL,
  ValorEquipeEntrMot             REAL,
  ValorEquipeEntrAjd             REAL,
  CustoVariavelCEDBZ             REAL,
  LucroUnitCEDBZ                 REAL,
  LucroVariavelCxEntregueFFCEDBZ REAL,
  TempoInterno                   TIME,
  ValorDropDown                  REAL,
  VeicCadDD                      VARCHAR(20),
  KmLaco                         REAL,
  KmDeslocamento                 REAL,
  TempoLaco                      TIME,
  TempoDeslocamento              TIME,
  SitMultiCDD                    REAL,
  UnbOrigem                      INTEGER,
  MatricMotorista                INTEGER,
  MatricAjud1                    INTEGER,
  MatricAjud2                    INTEGER,
  ValorCTEDifere                 VARCHAR(20),
  QtNfCarregadas                 INTEGER,
  QtNfEntregues                  INTEGER,
  IndDevCx                       REAL,
  IndDevNf                       REAL,
  Fator                          REAL,
  Recarga                        VARCHAR(20),
  HrMatinal                      TIME,
  HrJornadaLiq                   TIME,
  HrMetaJornada                  TIME,
  VlBateuJornMot                 REAL,
  VlNaoBateuJornMot              REAL,
  VlRecargaMot                   REAL,
  VlBateuJornAju                 REAL,
  VlNaoBateuJornAju              REAL,
  VlRecargaAju                   REAL,
  VlTotalMapa                    REAL,
  QtHlCarregados                 REAL,
  QtHlEntregues                  REAL,
  IndiceDevHl                    REAL,
  Regiao2                        VARCHAR(20),
  QtNfCarregGeral                INTEGER,
  QtNfEntregGeral                INTEGER,
  CapacidadeVeiculoKG            REAL,
  PesoCargaKG                    REAL,
  CapacVeiculoCx                 INT,
  EntregasCompletas              INT,
  EntregasParciais               INT,
  EntregasNaoRealizadas          INT,
  CodFilial                      INT,
  NomeFilial                     VARCHAR(255),
  CodSupervTrs                   INT,
  NomeSupervTrs                  VARCHAR(255),
  CodSpot                        INT,
  NomeSpot                       VARCHAR(255),
  EquipCarregados                INT,
  EquipDevolvidos                INT,
  EquipRecolhidos                INT,
  CxEntregTracking               REAL,
  HrCarreg                       TIMESTAMP,
  HrPCFisica                     TIMESTAMP,
  HrPCFinanceira                 TIMESTAMP,
  StMapa                         VARCHAR(255),
  COD_UNIDADE                    BIGINT,
  data_hora_import               TIMESTAMP DEFAULT current_timestamp,
  CONSTRAINT PK_MAPA PRIMARY KEY (MAPA, COD_UNIDADE),
  CONSTRAINT FK_MAPA_UNIDADE FOREIGN KEY (COD_UNIDADE)
  REFERENCES UNIDADE (CODIGO)
);

-- ENTREGA >> CONSOLIDA MAPAS E QUEM FEZ AS ENTREGAS -- Sem DAO
COMMENT ON TABLE MAPA_COLABORADOR IS 'Relaciona os mapas com os colaboradores que o realizaram';
COMMENT ON COLUMN MAPA_COLABORADOR.COD_AMBEV IS 'Matricula ambev do colaborador';
CREATE TABLE IF NOT EXISTS MAPA_COLABORADOR (
  MAPA        INTEGER NOT NULL,
  COD_UNIDADE INTEGER NOT NULL,
  COD_AMBEV   INTEGER NOT NULL,
  CONSTRAINT PK_MAPA_COLABORADOR PRIMARY KEY (MAPA, COD_UNIDADE, COD_AMBEV),
  CONSTRAINT FK_MAPA_UNIDADE FOREIGN KEY (COD_UNIDADE)
  REFERENCES UNIDADE (CODIGO)
);

-- TABELA GSD
COMMENT ON TABLE GSD IS 'Gabarito de segurança em distribuição';
CREATE TABLE IF NOT EXISTS GSD (
  CODIGO         BIGSERIAL    NOT NULL,
  DATA_HORA      TIMESTAMP,
  URL_FOTO       TEXT, -- foto da equipe auditada
  CPF_AVALIADOR  BIGINT,
  CPF_MOTORISTA  BIGINT,
  CPF_AJUDANTE_1 BIGINT,
  CPF_AJUDANTE_2 BIGINT,
  PLACA_VEICULO  VARCHAR(7),
  LATITUDE       VARCHAR(255) NOT NULL,
  LONGITUDE      VARCHAR(255) NOT NULL,
  CONSTRAINT PK_GSD PRIMARY KEY (CODIGO),
  CONSTRAINT FK_GSD_CPF_AVALIADOR FOREIGN KEY (CPF_AVALIADOR)
  REFERENCES COLABORADOR (CPF),
  CONSTRAINT FK_GSD_CPF_MOTORISTA FOREIGN KEY (CPF_MOTORISTA)
  REFERENCES COLABORADOR (CPF),
  CONSTRAINT FK_GSD_CPF_AJUDANTE_1 FOREIGN KEY (CPF_AJUDANTE_1)
  REFERENCES COLABORADOR (CPF),
  CONSTRAINT FK_GSD_CPF_AJUDANTE_2 FOREIGN KEY (CPF_AJUDANTE_2)
  REFERENCES COLABORADOR (CPF),
  CONSTRAINT FK_GSD_PLACA FOREIGN KEY (PLACA_VEICULO)
  REFERENCES VEICULO (PLACA)
);

-- PERGUNTAS DO GSD -- Sem DAO
COMMENT ON TABLE GSD_PERGUNTAS IS 'Perguntas de um GSD';
CREATE TABLE IF NOT EXISTS GSD_PERGUNTAS (
  CODIGO   BIGSERIAL    NOT NULL,
  PERGUNTA TEXT         NOT NULL,
  TIPO     VARCHAR(255) NOT NULL,
  CONSTRAINT PK_GSD_PERGUNTAS PRIMARY KEY (CODIGO)
);

-- RESPOSTAS DO GSD -- Sem DAO
COMMENT ON TABLE GSD_RESPOSTAS IS 'Respostas de um GSD';
CREATE TABLE IF NOT EXISTS GSD_RESPOSTAS (
  COD_GSD         BIGINT NOT NULL,
  CPF_COLABORADOR BIGINT NOT NULL,
  COD_PERGUNTA    BIGINT NOT NULL,
  RESPOSTA        TEXT,
  CONSTRAINT PK_GSD_RESPOSTAS PRIMARY KEY (COD_GSD, CPF_COLABORADOR, COD_PERGUNTA),
  CONSTRAINT FK_GSD_RESPOSTAS_GSD FOREIGN KEY (COD_GSD)
  REFERENCES GSD (CODIGO),
  CONSTRAINT FK_GSD_RESPOSTAS_GSD_PERGUNTAS FOREIGN KEY (COD_PERGUNTA)
  REFERENCES GSD_PERGUNTAS (CODIGO),
  CONSTRAINT FK_GSD_RESPOSTAS_COLABORADOR FOREIGN KEY (CPF_COLABORADOR)
  REFERENCES COLABORADOR (CPF)
);

COMMENT ON TABLE PDV IS 'Ponto de venda, cliente ambev';
CREATE TABLE IF NOT EXISTS PDV (
  CODIGO BIGSERIAL           NOT NULL,
  NOME   VARCHAR(255) UNIQUE NOT NULL,
  CONSTRAINT PK_PDV PRIMARY KEY (CODIGO),
  CONSTRAINT UNIQUE_PDV_NOME UNIQUE (NOME)
);

-- PDVS INCLUSOS EM UM GSD
COMMENT ON TABLE PDV_GSD IS 'Relaciona pdvs a um GSD';
CREATE TABLE IF NOT EXISTS PDV_GSD (
  COD_GSD BIGINT NOT NULL,
  COD_PDV BIGINT NOT NULL,
  CONSTRAINT PK_PDV_GSD PRIMARY KEY (COD_GSD, COD_PDV),
  CONSTRAINT FK_PDV_GSD_GSD FOREIGN KEY (COD_GSD) REFERENCES GSD (CODIGO),
  CONSTRAINT FK_PDV_GSD_PDV FOREIGN KEY (COD_PDV) REFERENCES PDV (CODIGO)
);

COMMENT ON TABLE TRACKING IS 'Dados coletados da planilha ambev (aderência), usados para calcular o indicador tracking';
CREATE TABLE IF NOT EXISTS TRACKING (
  Classe                      INTEGER,
  Data                        DATE,
  Mapa                        INTEGER    NOT NULL,
  Placa                       VARCHAR(7) NOT NULL,
  Cod_Cliente                 INTEGER    NOT NULL,
  Seq_Real                    INTEGER,
  Seq_Plan                    INTEGER,
  Inicio_Rota                 TIME,
  Horário_Matinal             TIME,
  Saída_CDD                   TIME,
  Chegada_ao_PDV              TIME,
  Tempo_Prev_Retorno          TIME,
  Tempo_Retorno               TIME,
  Dist_Prev_Retorno           REAL,
  Dist_Perc_Retorno           REAL,
  Inicio_Entrega              TIME,
  Fim_Entrega                 TIME,
  Fim_Rota                    TIME,
  Entrada_CDD                 TIME,
  Caixas_carregadas           REAL,
  Caixas_devolvidas           REAL,
  Repasse                     REAL,
  Tempo_de_entrega            TIME,
  Tempo_Descarga              TIME,
  Tempo_Espera                TIME,
  Tempo_Almoço                TIME,
  Tempo_total_de_rota         TIME,
  Disp_Apont_Cadastrado       REAL,
  Lat_Entrega                 VARCHAR(255),
  Lon_Entrega                 VARCHAR(255),
  Unidade_Negócio             INTEGER,
  Transportadora              VARCHAR(255),
  Lat_Cliente_Apontamento     VARCHAR(255),
  Lon_Cliente_Apontamento     VARCHAR(255),
  Lat_Atual_Cliente           VARCHAR(255),
  Lon_Atual_Cliente           VARCHAR(255),
  Distância_Prev              REAL,
  Tempo_Deslocamento          TIME,
  Vel_Média_km_h              REAL,
  Distância_Perc_Apontamento  REAL,
  Aderência_Sequencia_Entrega VARCHAR(3),
  Aderência_Janela_Entrega    VARCHAR(3),
  PDV_Lacrado                 VARCHAR(3),
  Código_Transportadora       INTEGER,
  Data_hora_import            TIMESTAMP DEFAULT current_timestamp,
  CONSTRAINT PK_TRACKING PRIMARY KEY (MAPA, DATA, PLACA, COD_CLIENTE)
);

COMMENT ON TABLE APP_VERSION IS 'Armazena as versões do app';
CREATE TABLE IF NOT EXISTS APP_VERSION (
  VERSION_CODE   BIGINT       NOT NULL,
  VERSION_NAME   VARCHAR(255) NOT NULL,
  DATA_LIBERACAO DATE         NOT NULL,
  CONSTRAINT PK_APP_VERSION PRIMARY KEY (VERSION_CODE)
);

COMMENT ON TABLE TOKEN_AUTENTICACAO IS 'Tokens de acesso, gerado quando o usuário loga em alguma das plataformas, deletado quando o mesmo realiza logout';
COMMENT ON COLUMN TOKEN_AUTENTICACAO.DATA_HORA IS 'Data e hora que o token foi gerado';
CREATE TABLE IF NOT EXISTS TOKEN_AUTENTICACAO (
  DATA_HORA       TIMESTAMP,
  CPF_COLABORADOR BIGINT       NOT NULL,
  TOKEN           VARCHAR(255) NOT NULL,
  CONSTRAINT PK_TOKEN_AUTENTICACAO PRIMARY KEY (TOKEN),
  CONSTRAINT FK_TOKEN_AUTENTICACAO_COLABORADOR FOREIGN KEY (CPF_COLABORADOR)
  REFERENCES COLABORADOR (CPF)
);

COMMENT ON TABLE SOLICITACAO_FOLGA IS 'Solicitação de folga';
COMMENT ON COLUMN SOLICITACAO_FOLGA.PERIODO IS 'Período da folga solicitada';
CREATE TABLE IF NOT EXISTS SOLICITACAO_FOLGA (
  CODIGO                 SERIAL       NOT NULL,
  CPF_COLABORADOR        BIGINT       NOT NULL,
  CPF_FEEDBACK           BIGINT,
  DATA_SOLICITACAO       DATE         NOT NULL,
  DATA_FOLGA             DATE         NOT NULL,
  DATA_FEEDBACK          DATE,
  MOTIVO_FOLGA           TEXT         NOT NULL,
  JUSTIFICATIVA_FEEDBACK TEXT,
  STATUS                 VARCHAR(255) NOT NULL,
  PERIODO                VARCHAR(255) NOT NULL,
  CONSTRAINT PK_SOLICITACAO_FOLGA PRIMARY KEY (CODIGO),
  CONSTRAINT FK_SOLICITACAO_FOLGA_COLABORADOR FOREIGN KEY (CPF_COLABORADOR)
  REFERENCES COLABORADOR (CPF),
  CONSTRAINT FK_SOLICITACAO_FOLGA_COLABORADOR_FEEDBACK FOREIGN KEY (CPF_FEEDBACK)
  REFERENCES COLABORADOR (CPF)
);

COMMENT ON TABLE CALENDARIO IS 'Calendário, contém os eventos';
COMMENT ON COLUMN CALENDARIO.DESCRICAO IS 'Descrição do evento';
COMMENT ON COLUMN CALENDARIO.COD_FUNCAO IS 'Funçao (cargo) que o evento estará visível';
COMMENT ON COLUMN CALENDARIO.COD_EQUIPE IS 'Equipe que o evento estará visível';
COMMENT ON COLUMN CALENDARIO.LOCAL IS 'Local do evento';
CREATE TABLE IF NOT EXISTS CALENDARIO (
  CODIGO      BIGSERIAL    NOT NULL,
  DATA        TIMESTAMP    NOT NULL,
  DESCRICAO   VARCHAR(255) NOT NULL,
  COD_UNIDADE BIGINT,
  COD_FUNCAO  BIGINT,
  COD_EQUIPE  BIGINT,
  LOCAL       VARCHAR(255),
  CONSTRAINT PK_CALENDARIO PRIMARY KEY (CODIGO),
  CONSTRAINT FK_CALENDARIO_UNIDADE FOREIGN KEY
    (COD_UNIDADE) REFERENCES UNIDADE (CODIGO),
  CONSTRAINT FK_CALENDARIO_FUNCAO FOREIGN KEY
    (COD_FUNCAO) REFERENCES FUNCAO (CODIGO),
  CONSTRAINT FK_CALENDARIO_EQUIPE FOREIGN KEY
    (COD_EQUIPE) REFERENCES EQUIPE (CODIGO)
);

--PNEU-- SERVIÇOS APONTADOS APÓS REALIZADA UMA AFERIÇÃO
COMMENT ON TABLE AFERICAO_MANUTENCAO IS 'Pneus com problemas identificados em uma aferição';
COMMENT ON COLUMN AFERICAO_MANUTENCAO.DATA_HORA_RESOLUCAO IS 'Data e hora que o item foi consertado';
COMMENT ON COLUMN AFERICAO_MANUTENCAO.TIPO_SERVICO IS 'Tipo do serviço, podendo ser calibragem, inspeção ou movimentação';
COMMENT ON COLUMN AFERICAO_MANUTENCAO.COD_PNEU_INSERIDO IS 'Usado apenas para o tipo de serviço movimentação';
CREATE TABLE IF NOT EXISTS AFERICAO_MANUTENCAO (
  COD_AFERICAO            BIGINT       NOT NULL,
  COD_PNEU                BIGINT       NOT NULL,
  COD_PNEU_INCONSISTENCIA BIGINT,
  COD_UNIDADE             BIGINT       NOT NULL,
  TIPO_SERVICO            VARCHAR(255) NOT NULL,
  DATA_HORA_RESOLUCAO     TIMESTAMP,
  CPF_MECANICO            BIGINT,
  QT_APONTAMENTOS         INT DEFAULT 1,
  PSI_APOS_CONSERTO       REAL,
  KM_MOMENTO_CONSERTO     BIGINT,
  COD_ALTERNATIVA         BIGINT, -- APENAS PARA INSPEÇÃO
  COD_PNEU_INSERIDO       BIGINT, -- APENAS PARA MOVIMENTAÇÃO
  COD_MOVIMENTACAO        BIGINT, -- APENAS PARA MOVIMENTAÇÃO
  CONSTRAINT PK_AFERICAO_MANUTENCAO PRIMARY KEY (COD_AFERICAO, COD_PNEU, COD_UNIDADE, TIPO_SERVICO),
  CONSTRAINT FK_AFERICAO_MANUTENCAO_AFERICAO FOREIGN KEY (COD_AFERICAO)
  REFERENCES AFERICAO (CODIGO) ON DELETE CASCADE,
  CONSTRAINT FK_AFERICAO_MANUTENCAO_PNEU FOREIGN KEY (COD_PNEU, COD_UNIDADE)
  REFERENCES PNEU (CODIGO, COD_UNIDADE) ON DELETE CASCADE,
  CONSTRAINT FK_AFERICAO_MANUTENCAO_PNEU_INCONSISTENCIA FOREIGN KEY (COD_PNEU_INCONSISTENCIA, COD_UNIDADE)
  REFERENCES PNEU (CODIGO, COD_UNIDADE) ON DELETE CASCADE,
  CONSTRAINT FK_AFERICAO_MANUTENCAO_PNEU_INSERIDO FOREIGN KEY (COD_PNEU_INSERIDO, COD_UNIDADE)
  REFERENCES PNEU (CODIGO, COD_UNIDADE) ON DELETE CASCADE,
  CONSTRAINT FK_AFERICAO_MANUTENCAO FOREIGN KEY (CPF_MECANICO)
  REFERENCES COLABORADOR (CPF),
  CONSTRAINT AFERICAO_MANUTENCAO_ALTERNATIVA FOREIGN KEY (COD_ALTERNATIVA)
  REFERENCES AFERICAO_ALTERNATIVA_MANUTENCAO_INSPECAO (CODIGO)
);
ALTER TABLE AFERICAO_MANUTENCAO ALTER COLUMN COD_PNEU TYPE VARCHAR(255);
ALTER TABLE AFERICAO_MANUTENCAO ALTER COLUMN COD_PNEU_INCONSISTENCIA TYPE VARCHAR(255);
ALTER TABLE AFERICAO_MANUTENCAO ALTER COLUMN COD_PNEU_INSERIDO TYPE VARCHAR(255);
ALTER TABLE AFERICAO_MANUTENCAO ADD COLUMN COD_MOVIMENTACAO BIGINT;
ALTER TABLE AFERICAO_MANUTENCAO ADD CONSTRAINT FK_AFERICAO_MANUTENCAO_MOVIMENTACAO FOREIGN KEY (COD_MOVIMENTACAO)
REFERENCES MOVIMENTACAO(CODIGO);

--PNEU-- ALTERNATIVAS A SEREM ESCOLHIDAS EM UM SERVIÇO DO TIPO "INSPEÇÃO"
COMMENT ON TABLE AFERICAO_ALTERNATIVA_MANUTENCAO_INSPECAO IS 'Alternativas para selecionar quando for consertar um item de inspeção';
CREATE TABLE IF NOT EXISTS AFERICAO_ALTERNATIVA_MANUTENCAO_INSPECAO (
  CODIGO       BIGSERIAL    NOT NULL,
  ALTERNATIVA  VARCHAR(255) NOT NULL,
  STATUS_ATIVO BOOLEAN      NOT NULL,
  CONSTRAINT PK_AFERICAO_AFERICAO_ALTERNATIVA_MANUTENCAO_INSPECAO PRIMARY KEY (CODIGO)
);

COMMENT ON TABLE MOVIMENTACAO_PROCESSO IS 'Registra as movimentações';
CREATE TABLE IF NOT EXISTS MOVIMENTACAO_PROCESSO (
  CODIGO          BIGSERIAL NOT NULL,
  COD_UNIDADE     BIGINT    NOT NULL,
  DATA_HORA       TIMESTAMP NOT NULL,
  CPF_RESPONSAVEL BIGINT,
  OBSERVACAO      TEXT,
  CONSTRAINT PK_MOVIMENTACAO_PROCESSO PRIMARY KEY (CODIGO, COD_UNIDADE),
  CONSTRAINT FK_MOVIMENTACAO_PROCESSO_COLABORADOR FOREIGN KEY (CPF_RESPONSAVEL)
  REFERENCES COLABORADOR (CPF),
  CONSTRAINT FK_MOVIMENTACAO_PROCESSO_UNIDADE FOREIGN KEY (COD_UNIDADE)
  REFERENCES UNIDADE (CODIGO)
);

--PNEU-- TABELA ONDE SERÃO INSERIDAS AS MOVIMENTAÇÕES REALIZADAS
COMMENT ON TABLE MOVIMENTACAO IS 'Registra os pneus movimentados em uma movimentação';
COMMENT ON COLUMN MOVIMENTACAO.SULCO_CENTRAL IS 'Profundidade do sulco no momento da movimentação';
COMMENT ON COLUMN MOVIMENTACAO.SULCO_INTERNO IS 'Profundidade do sulco no momento da movimentação';
COMMENT ON COLUMN MOVIMENTACAO.SULCO_EXTERNO IS 'Profundidade do sulco no momento da movimentação';
CREATE TABLE IF NOT EXISTS MOVIMENTACAO (
  CODIGO                    BIGSERIAL NOT NULL,
  COD_MOVIMENTACAO_PROCESSO BIGSERIAL NOT NULL,
  COD_UNIDADE               BIGINT    NOT NULL,
  COD_PNEU                  BIGINT    NOT NULL,
  SULCO_INTERNO             REAL,
  SULCO_CENTRAL_INTERNO     REAL,
  SULCO_CENTRAL_EXTERNO     REAL,
  SULCO_EXTERNO             REAL,
  VIDA                      INT,
  OBSERVACAO                TEXT,
  CONSTRAINT PK_MOVIMENTACAO PRIMARY KEY (CODIGO),
  CONSTRAINT FK_MOVIMENTACAO_PNEU FOREIGN KEY (COD_PNEU, COD_UNIDADE)
  REFERENCES PNEU (CODIGO, COD_UNIDADE),
  CONSTRAINT FK_MOVIMENTACAO_MOVIMENTACAO_PROCECSSO FOREIGN KEY (COD_MOVIMENTACAO_PROCESSO, COD_UNIDADE)
  REFERENCES MOVIMENTACAO_PROCESSO (CODIGO, COD_UNIDADE),
  CONSTRAINT FK_MOVIMENTACAO_UNIDADE FOREIGN KEY (COD_UNIDADE)
  REFERENCES UNIDADE (CODIGO)
);
ALTER TABLE MOVIMENTACAO ALTER COLUMN COD_PNEU TYPE VARCHAR(255);

ALTER TABLE movimentacao RENAME COLUMN sulco_central TO sulco_central_interno;
ALTER TABLE movimentacao ADD COLUMN sulco_central_externo REAL;

COMMENT ON TABLE MOVIMENTACAO_ORIGEM IS 'Origem do pneu que foi movimentado';
COMMENT ON COLUMN MOVIMENTACAO_ORIGEM.TIPO_ORIGEM IS 'Tipo da origem, deve ser ESTOQUE, RECAPAGEM OU VEICULO';
COMMENT ON COLUMN MOVIMENTACAO_ORIGEM.PLACA IS 'Placa do veículo que o pneu foi removido';
COMMENT ON COLUMN MOVIMENTACAO_ORIGEM.KM_VEICULO IS 'Km do veículo no momento da movimentação';
COMMENT ON COLUMN MOVIMENTACAO_ORIGEM.POSICAO_PNEU_ORIGEM IS 'Posição em que o pneu foi removido';
CREATE TABLE IF NOT EXISTS MOVIMENTACAO_ORIGEM (
  COD_MOVIMENTACAO    BIGINT       NOT NULL,
  TIPO_ORIGEM         VARCHAR(255) NOT NULL,
  PLACA               VARCHAR(7),
  KM_VEICULO          INT,
  POSICAO_PNEU_ORIGEM INT,
  CONSTRAINT PK_MOVIMENTACAO_ORIGEM PRIMARY KEY (COD_MOVIMENTACAO),
  CONSTRAINT FK_MOVIMENTACAO_ORIGEM_MOVIMENTACAO FOREIGN KEY (COD_MOVIMENTACAO)
  REFERENCES MOVIMENTACAO (CODIGO),
  CONSTRAINT FK_MOVIMENTACAO_ORIGEM_VEICULO FOREIGN KEY (PLACA)
  REFERENCES VEICULO (PLACA),
  CONSTRAINT CHECK_MOVIMENTACAO_ORIGEM_TIPO_ORIGEM CHECK (TIPO_ORIGEM = 'ESTOQUE' OR TIPO_ORIGEM = 'RECAPAGEM'
                                                          OR TIPO_ORIGEM = 'EM_USO' OR TIPO_ORIGEM = 'ANALISE'),
  CONSTRAINT CHECK_MOVIMENTACAO_DESTINO_KM_VEICULO CHECK (KM_VEICULO < 1000000)
);

COMMENT ON TABLE MOVIMENTACAO_ORIGEM IS 'Destino do pneu que foi movimentado';
COMMENT ON COLUMN MOVIMENTACAO_ORIGEM.TIPO_ORIGEM IS 'Tipo do destino, deve ser ESTOQUE, RECAPAGEM, VEICULO ou DESCARTE';
COMMENT ON COLUMN MOVIMENTACAO_ORIGEM.PLACA IS 'Placa do veículo que o pneu foi inserido';
COMMENT ON COLUMN MOVIMENTACAO_ORIGEM.KM_VEICULO IS 'Km do veículo no momento da movimentação';
COMMENT ON COLUMN MOVIMENTACAO_ORIGEM.POSICAO_PNEU_ORIGEM IS 'Posição em que o pneu foi inserido';
CREATE TABLE IF NOT EXISTS MOVIMENTACAO_DESTINO (
  COD_MOVIMENTACAO     BIGINT       NOT NULL,
  TIPO_DESTINO         VARCHAR(255) NOT NULL,
  PLACA                VARCHAR(7),
  KM_VEICULO           INT,
  POSICAO_PNEU_DESTINO INT,
  CONSTRAINT PK_MOVIMENTACAO_DESTINO PRIMARY KEY (COD_MOVIMENTACAO),
  CONSTRAINT FK_MOVIMENTACAO_DESTINO_MOVIMENTACAO_PNEU FOREIGN KEY (COD_MOVIMENTACAO)
  REFERENCES MOVIMENTACAO (CODIGO),
  CONSTRAINT FK_MOVIMENTACAO_DESTINO_VEICULO FOREIGN KEY (PLACA)
  REFERENCES VEICULO (PLACA),
  CONSTRAINT CHECK_MOVIMENTACAO_DESTINO_TIPO_DESTINO CHECK (
    TIPO_DESTINO = 'ESTOQUE' OR TIPO_DESTINO = 'RECAPAGEM' OR
    TIPO_DESTINO = 'EM_USO' OR TIPO_DESTINO = 'DESCARTE' OR
    TIPO_DESTINO = 'ANALISE'),
  CONSTRAINT CHECK_MOVIMENTACAO_DESTINO_KM_VEICULO CHECK (KM_VEICULO < 1000000)
);

--PNEU - INCONSISTÊNCIA DE PNEUS, QUANDO UM PNEU ESTA FISICAMENTE NO CAMINHÃO,
-- PORÉM NO SISTEMA NÃO ESTA VINCULADO AO MESMO
COMMENT ON TABLE VEICULO_PNEU_INCONSISTENCIA IS 'Inconsistência entre os pneus aplicados fisicamente (veículo real) e virtualmente (sistema)';
COMMENT ON COLUMN VEICULO_PNEU_INCONSISTENCIA.COD_AFERICAO IS 'Aferição onde foi identificada a inconsistência';
COMMENT ON COLUMN VEICULO_PNEU_INCONSISTENCIA.COD_PNEU_CORRETO IS 'Código do pneu que está aplicado no veículo';
COMMENT ON COLUMN VEICULO_PNEU_INCONSISTENCIA.COD_PNEU_INCORRETO IS 'Código do pneu que está aplicado no sistema';
COMMENT ON COLUMN VEICULO_PNEU_INCONSISTENCIA.POSICAO IS 'Posição do pneu com código incorreto';
COMMENT ON COLUMN VEICULO_PNEU_INCONSISTENCIA.DATA_HORA_FECHAMENTO IS 'Data que a inconsistência foi resolvida';
COMMENT ON COLUMN VEICULO_PNEU_INCONSISTENCIA.CPF_FECHAMENTO IS 'Colaborador que resolveu a inconsistência';
CREATE TABLE IF NOT EXISTS VEICULO_PNEU_INCONSISTENCIA (
  DATA_HORA            TIMESTAMP  NOT NULL,
  COD_AFERICAO         BIGINT     NOT NULL,
  PLACA                VARCHAR(7) NOT NULL,
  COD_PNEU_CORRETO     BIGINT     NOT NULL,
  COD_PNEU_INCORRETO   BIGINT     NOT NULL,
  POSICAO              INT        NOT NULL,
  COD_UNIDADE          BIGINT     NOT NULL,
  DATA_HORA_FECHAMENTO TIMESTAMP,
  CPF_FECHAMENTO       BIGINT,
  CONSTRAINT PK_VEICULO_PNEU_INCONSISTENCIA PRIMARY KEY (PLACA, POSICAO),
  CONSTRAINT FK_VEICULO_PNEU_INCONSISTENCIA_PNEU_CORRETO FOREIGN KEY (COD_PNEU_CORRETO, COD_UNIDADE)
  REFERENCES PNEU (CODIGO, COD_UNIDADE),
  CONSTRAINT FK_VEICULO_PNEU_INCONSISTENCIA_PNEU_INCORRETO FOREIGN KEY (COD_PNEU_INCORRETO, COD_UNIDADE)
  REFERENCES PNEU (CODIGO, COD_UNIDADE),
  CONSTRAINT FK_VEICULO_PNEU_INCONSISTENCIA_UNIDADE FOREIGN KEY (COD_UNIDADE)
  REFERENCES UNIDADE (CODIGO),
  CONSTRAINT FK_VEICULO_PNEU_INCONSISTENCIA_PLACA FOREIGN KEY (PLACA)
  REFERENCES VEICULO (PLACA),
  CONSTRAINT FK_VEICULO_PNEU_INCONSISTENCIA_AFERICAO FOREIGN KEY (COD_AFERICAO)
  REFERENCES AFERICAO (CODIGO),
  CONSTRAINT FK_VEICULO_PNEU_INCONSISTENCIA_COLABORADOR FOREIGN KEY (CPF_FECHAMENTO)
  REFERENCES COLABORADOR (CPF)
);
ALTER TABLE veiculo_pneu_inconsistencia ALTER COLUMN COD_PNEU_CORRETO TYPE VARCHAR(255);
ALTER TABLE veiculo_pneu_inconsistencia ALTER COLUMN COD_PNEU_INCORRETO TYPE VARCHAR(255);

-- PILARES DO PROLOG
COMMENT ON TABLE PILAR_PROLOG IS 'Pilares do sistema, baseado no DPO';
CREATE TABLE IF NOT EXISTS PILAR_PROLOG (
  CODIGO BIGINT       NOT NULL,
  PILAR  VARCHAR(255) NOT NULL,
  CONSTRAINT PK_PILAR_PROLOG PRIMARY KEY (CODIGO)
);

-- RELACAO DAS FUNCOES E A QUAL PILAR A MESMA PERTENCE
COMMENT ON TABLE FUNCAO_PROLOG IS 'Funções do ProLog';
COMMENT ON COLUMN FUNCAO_PROLOG.COD_PILAR IS 'Código do pilar ao qual a função pertence';
CREATE TABLE IF NOT EXISTS FUNCAO_PROLOG (
  CODIGO    BIGINT       NOT NULL,
  FUNCAO    VARCHAR(255) NOT NULL,
  COD_PILAR BIGINT       NOT NULL,
  CONSTRAINT PK_FUNCAO_PROLOG PRIMARY KEY (CODIGO, COD_PILAR),
  CONSTRAINT FK_FUNCAO_PROLOG_PILAR_PROLOG FOREIGN KEY (COD_PILAR)
  REFERENCES PILAR_PROLOG (CODIGO)
);

-- RELACAO ENTRE UM CARGO E QUAIS FUNCOES DO PROLOG ELE TEM ACESSO
COMMENT ON TABLE CARGO_FUNCAO_PROLOG IS 'Relaciona uma função (cargo) com as funções do ProLog';
COMMENT ON COLUMN CARGO_FUNCAO_PROLOG.COD_FUNCAO_COLABORADOR IS 'Código do cargo do colaborador';
COMMENT ON COLUMN CARGO_FUNCAO_PROLOG.COD_FUNCAO_PROLOG IS 'Código da função do ProLog';
COMMENT ON COLUMN CARGO_FUNCAO_PROLOG.COD_PILAR_PROLOG IS 'Código do pilar ao qual a função pertence';
CREATE TABLE IF NOT EXISTS CARGO_FUNCAO_PROLOG (
  COD_UNIDADE            BIGINT NOT NULL,
  COD_FUNCAO_COLABORADOR BIGINT NOT NULL,
  COD_FUNCAO_PROLOG      BIGINT NOT NULL,
  COD_PILAR_PROLOG       BIGINT NOT NULL,
  CONSTRAINT PK_CARGO_FUNCAO_PROLOG PRIMARY KEY (COD_UNIDADE, COD_FUNCAO_COLABORADOR, COD_FUNCAO_PROLOG, COD_PILAR_PROLOG),
  CONSTRAINT FK_CARGO_FUNCAO_PROLOG_UNIDADE FOREIGN KEY (COD_UNIDADE)
  REFERENCES UNIDADE (CODIGO),
  CONSTRAINT FK_CARGO_FUNCAO_PROLOG_FUNCAO_COLABORADOR FOREIGN KEY (COD_UNIDADE, COD_FUNCAO_COLABORADOR)
  REFERENCES UNIDADE_FUNCAO (COD_UNIDADE, COD_FUNCAO),
  CONSTRAINT FK_CARGO_FUNCAO_PROLOG_PILAR_PROLOG FOREIGN KEY (COD_PILAR_PROLOG)
  REFERENCES PILAR_PROLOG (CODIGO),
  CONSTRAINT FK_CARGO_FUNCAO_PROLOG_FUNCAO_PROLOG FOREIGN KEY (COD_PILAR_PROLOG,
                                                               COD_FUNCAO_PROLOG) REFERENCES FUNCAO_PROLOG (COD_PILAR, CODIGO)

);

-- PILAR X UNIDADE
COMMENT ON TABLE UNIDADE_PILAR_PROLOG IS 'Relaciona a unidade com os pilares do ProLog';
CREATE TABLE IF NOT EXISTS UNIDADE_PILAR_PROLOG (
  COD_UNIDADE BIGINT NOT NULL,
  COD_PILAR   BIGINT NOT NULL,
  CONSTRAINT PK_UNIDADE_PILAR_PROLOG PRIMARY KEY (COD_UNIDADE, COD_PILAR),
  CONSTRAINT FK_UNIDADE_PILAR_PROLOG_PILAR_PROLOG FOREIGN KEY (COD_PILAR)
  REFERENCES PILAR_PROLOG (CODIGO),
  CONSTRAINT FK_UNIDADE_PILAR_PROLOG_UNIDADE FOREIGN KEY (COD_UNIDADE)
  REFERENCES UNIDADE (CODIGO)
);

-- ALTERNATIVAS DE UM RELATO, ASSINALADO NA CRIAÇÃO DO MESMO PARA CLASSIFICARMOS
COMMENT ON TABLE RELATO_ALTERNATIVA IS 'Alternativas para selecionar quando reportar um relato';
COMMENT ON COLUMN RELATO_ALTERNATIVA.COD_SETOR IS 'Código do setor que a alternativa estará disponível';
CREATE TABLE IF NOT EXISTS RELATO_ALTERNATIVA (
  COD_UNIDADE  BIGINT    NOT NULL,
  COD_SETOR    BIGINT,
  CODIGO       BIGSERIAL NOT NULL,
  ALTERNATIVA  VARCHAR(255),
  STATUS_ATIVO BOOLEAN   NOT NULL,
  CONSTRAINT PK_RELATO_ALTERNATIVA PRIMARY KEY (COD_UNIDADE, CODIGO),
  CONSTRAINT FK_RELATO_ALTERNATIVA_UNIDADE FOREIGN KEY (COD_UNIDADE)
  REFERENCES UNIDADE (CODIGO),
  CONSTRAINT FK_RELATO_ALTERNATIVA_SETOR FOREIGN KEY (COD_UNIDADE, COD_SETOR)
  REFERENCES SETOR (COD_UNIDADE, CODIGO)
);

-- TABELA AUXILIAR CONTENDO TODAS OS DIAS DE 2016 PARA AUXILIAR EM CONSULTAS
COMMENT ON TABLE AUX_DATA IS 'Tabela auxiliar, contém todos os dias do ano';
CREATE TABLE IF NOT EXISTS AUX_DATA (
  DATA DATE
);

-- IMPLEMENTAÇÃO PARTE DE OS

-- TABELA OS
COMMENT ON TABLE CHECKLIST_ORDEM_SERVICO IS 'Ordens de serviço geradas pelo checklist';
COMMENT ON COLUMN CHECKLIST_ORDEM_SERVICO.STATUS IS 'Status da OS, pode ser aberta (A) ou fechada (F)';
COMMENT ON COLUMN CHECKLIST_ORDEM_SERVICO.DATA_HORA_FECHAMENTO IS 'Data que a OS foi fechada';
CREATE TABLE IF NOT EXISTS CHECKLIST_ORDEM_SERVICO (
  CODIGO               BIGSERIAL    NOT NULL,
  COD_UNIDADE          BIGINT       NOT NULL,
  COD_CHECKLIST        BIGINT       NOT NULL,
  STATUS               VARCHAR(255) NOT NULL,
  DATA_HORA_FECHAMENTO TIMESTAMP,
  CONSTRAINT PK_CHECKLIST_ORDEM_SERVICO PRIMARY KEY (CODIGO, COD_UNIDADE),
  CONSTRAINT FK_CHECKLIST_ORDEM_SERVICO_UNIDADE FOREIGN KEY (COD_UNIDADE)
  REFERENCES UNIDADE (CODIGO),
  CONSTRAINT FK_CHECKLIST_ORDEM_SERVICO_CHECKLIST FOREIGN KEY (COD_CHECKLIST)
  REFERENCES CHECKLIST (CODIGO)
);

-- TABELA ITENS OS
COMMENT ON TABLE CHECKLIST_ORDEM_SERVICO_ITENS IS 'Itens que compõe uma OS';
COMMENT ON COLUMN CHECKLIST_ORDEM_SERVICO_ITENS.COD_PERGUNTA IS 'Código que referencia a pergunta';
COMMENT ON COLUMN CHECKLIST_ORDEM_SERVICO_ITENS.COD_ALTERNATIVA IS 'Código que referencia a alternativa da pergunta';
COMMENT ON COLUMN CHECKLIST_ORDEM_SERVICO_ITENS.CPF_MECANICO IS 'Colaborador que realizou o conserto do item';
COMMENT ON COLUMN CHECKLIST_ORDEM_SERVICO_ITENS.FEEDBACK_CONSERTO IS 'Descrição do serviço realizado';
COMMENT ON COLUMN CHECKLIST_ORDEM_SERVICO_ITENS.TEMPO_REALIZACAO IS 'Tempo de duração do conserto';
COMMENT ON COLUMN CHECKLIST_ORDEM_SERVICO_ITENS.QT_APONTAMENTOS IS 'Quantidade de apontamentos que o mesmo item teve antes de ser consertado';
COMMENT ON COLUMN CHECKLIST_ORDEM_SERVICO_ITENS.KM IS 'Km do veículo no momento do conserto do item';
CREATE TABLE IF NOT EXISTS CHECKLIST_ORDEM_SERVICO_ITENS (
  COD_UNIDADE       BIGINT        NOT NULL,
  COD_OS            BIGINT        NOT NULL,
  COD_PERGUNTA      BIGINT        NOT NULL,
  COD_ALTERNATIVA   BIGINT        NOT NULL,
  CPF_MECANICO      BIGINT,
  TEMPO_REALIZACAO  BIGINT,
  KM                BIGINT,
  QT_APONTAMENTOS   INT DEFAULT 1 NOT NULL,
  STATUS_RESOLUCAO  TEXT,
  FEEDBACK_CONSERTO TEXT,
  CONSTRAINT PK_CHECKLIST_ORDEM_SERVICO_ITENS PRIMARY KEY (COD_OS, COD_PERGUNTA, COD_ALTERNATIVA),
  CONSTRAINT FK_CHECKLIST_ORDEM_SERVICO_ITENS FOREIGN KEY (CPF_MECANICO)
  REFERENCES COLABORADOR (CPF),
  CONSTRAINT FK_CHECKLIST_ORDEM_SERVICO_ITENS_UNIDADE FOREIGN KEY (COD_UNIDADE)
  REFERENCES UNIDADE (CODIGO),
  CONSTRAINT FK_CHECKLIST_ORDEM_SERVICO_ITENS_OS FOREIGN KEY (COD_OS, COD_UNIDADE)
  REFERENCES CHECKLIST_ORDEM_SERVICO (CODIGO, COD_UNIDADE)
);

COMMENT ON TABLE UNIDADE_METAS IS 'Metas de uma unidade';
CREATE TABLE IF NOT EXISTS UNIDADE_METAS (
  COD_UNIDADE                BIGINT NOT NULL,
  META_DEV_HL                REAL,
  META_DEV_PDV               REAL,
  META_DEV_NF                REAL,
  META_TRACKING              REAL,
  META_RAIO_TRACKING         REAL,
  META_TEMPO_LARGADA_MAPAS   REAL,
  META_TEMPO_ROTA_MAPAS      REAL,
  META_TEMPO_INTERNO_MAPAS   REAL,
  META_JORNADA_LIQUIDA_MAPAS REAL,
  META_TEMPO_LARGADA_HORAS   TIME,
  META_TEMPO_ROTA_HORAS      TIME,
  META_TEMPO_INTERNO_HORAS   TIME,
  META_JORNADA_LIQUIDA_HORAS TIME,
  META_CAIXA_VIAGEM          REAL,
  META_DISPERSAO_KM          REAL,
  META_DISPERSAO_TEMPO       REAL,
  CONSTRAINT PK_UNIDADE_METAS PRIMARY KEY (COD_UNIDADE),
  CONSTRAINT FK_UNIDADE_VALORES_UNIDADE FOREIGN KEY (COD_UNIDADE)
  REFERENCES UNIDADE (CODIGO)
);

--TABELA PARA ARMAZENAR OS VALORES DA REMUNERAÇÃO VARIÁVEL
-- DO AS, QUE NÃO CONSTA NO 2ART
COMMENT ON TABLE UNIDADE_VALORES_RM IS 'Valores de remuneração variável para os mapas de AS';
CREATE TABLE IF NOT EXISTS UNIDADE_VALORES_RM (
  COD_UNIDADE                            BIGINT NOT NULL,
  RM_MOTORISTA_VALOR_AS_1_ENTREGA        REAL,
  RM_MOTORISTA_VALOR_AS_2_ENTREGAS       REAL,
  RM_MOTORISTA_VALOR_AS_3_ENTREGAS       REAL,
  RM_MOTORISTA_VALOR_AS_MAIOR_3_ENTREGAS REAL,
  RM_AJUDANTE_VALOR_AS_1_ENTREGA         REAL,
  RM_AJUDANTE_VALOR_AS_2_ENTREGAS        REAL,
  RM_AJUDANTE_VALOR_AS_3_ENTREGAS        REAL,
  RM_AJUDANTE_VALOR_AS_MAIOR_3_ENTREGAS  REAL,
  CONSTRAINT FK_UNIDADE_VALORES_UNIDADE FOREIGN KEY (COD_UNIDADE)
  REFERENCES UNIDADE (CODIGO)
);

ALTER TABLE UNIDADE_VALORES_RM ADD COLUMN RM_MOTORISTA_VALOR_AS_3_ENTREGAS REAL;
ALTER TABLE UNIDADE_VALORES_RM ADD COLUMN RM_AJUDANTE_VALOR_AS_3_ENTREGAS REAL;
ALTER TABLE UNIDADE_VALORES_RM ADD COLUMN RM_MOTORISTA_VALOR_AS_MAIOR_3_ENTREGAS REAL;
ALTER TABLE UNIDADE_VALORES_RM ADD COLUMN RM_AJUDANTE_VALOR_AS_MAIOR_3_ENTREGAS REAL;
ALTER TABLE UNIDADE_VALORES_RM DROP COLUMN RM_MOTORISTA_VALOR_AS_MAIOR_2_ENTREGAS REAL;
ALTER TABLE UNIDADE_VALORES_RM DROP COLUMN RM_AJUDANTE_VALOR_AS_MAIOR_2_ENTREGAS REAL;


--TABELA DE CONTROLE DE ACESSOS À RM
COMMENT ON TABLE ACESSOS_PRODUTIVIDADE IS 'Loga os acessos a produtividade';
COMMENT ON COLUMN ACESSOS_PRODUTIVIDADE.DATA_HORA_CONSULTA IS 'Data e hora que o colaborador realizou a consulta';
COMMENT ON COLUMN ACESSOS_PRODUTIVIDADE.MES_ANO_CONSULTADO IS 'Período buscado';
COMMENT ON COLUMN ACESSOS_PRODUTIVIDADE.CPF_COLABORADOR IS 'Colaborador que realizou a consulta';
CREATE TABLE IF NOT EXISTS ACESSOS_PRODUTIVIDADE (
  COD_UNIDADE        BIGINT       NOT NULL,
  CPF_COLABORADOR    BIGINT       NOT NULL,
  DATA_HORA_CONSULTA TIMESTAMP    NOT NULL,
  MES_ANO_CONSULTADO VARCHAR(255) NOT NULL,
  CONSTRAINT PK_ACESSOS_PRODUTIVIDADE PRIMARY KEY (CPF_COLABORADOR, DATA_HORA_CONSULTA),
  CONSTRAINT FK_ACESSOS_PRODUTIVIDADE_UNIDADE FOREIGN KEY (COD_UNIDADE)
  REFERENCES UNIDADE (CODIGO),
  CONSTRAINT FK_ACESSOS_PRODUTIVIDADE_COLABORADOR FOREIGN KEY (CPF_COLABORADOR)
  REFERENCES COLABORADOR (CPF)
);

--TABELA PARA ARMAZENAR O VALOR DO BONUS POR NIVEL DE SERVICO
COMMENT ON TABLE PRE_CONTRACHEQUE_INFORMACOES IS 'Parâmetros do pré contracheque';
COMMENT ON COLUMN PRE_CONTRACHEQUE_INFORMACOES.BONUS_AJUDANTE IS 'Bônus por nível de serviço';
COMMENT ON COLUMN PRE_CONTRACHEQUE_INFORMACOES.BONUS_MOTORISTA IS 'Bônus por nível de serviço';
COMMENT ON COLUMN PRE_CONTRACHEQUE_INFORMACOES.COD_CARGO_AJUDANTE IS 'Código do cargo de ajudante';
COMMENT ON COLUMN PRE_CONTRACHEQUE_INFORMACOES.COD_CARGO_MOTORISTA IS 'Código do cargo de motorista';
COMMENT ON COLUMN PRE_CONTRACHEQUE_INFORMACOES.INDICADOR IS 'Indicador a ser utilizado para calcular o bônus por nível de serviço';
CREATE TABLE IF NOT EXISTS PRE_CONTRACHEQUE_INFORMACOES (
  COD_UNIDADE         BIGINT       NOT NULL,
  COD_CARGO_AJUDANTE  BIGINT       NOT NULL,
  COD_CARGO_MOTORISTA BIGINT       NOT NULL,
  BONUS_AJUDANTE      REAL         NOT NULL,
  BONUS_MOTORISTA     REAL         NOT NULL,
  INDICADOR           VARCHAR(255) NOT NULL,
  RECARGA_PARTE_PREMIO BOOLEAN     NOT NULL,
  CONSTRAINT PK_PRE_CONTRACHEQUE_INFORMACOES PRIMARY KEY (COD_UNIDADE)
  CONSTRAINT FK_PRE_CONTRACHEQUE_INFORMACOES_UNIDADE FOREIGN KEY (COD_UNIDADE)
  REFERENCES UNIDADE(CODIGO)
);

-- Alterações realizadas após a refatoração, removendo os itens que compões o prêmio de colunas e adicionando em uma tabela especifica
ALTER TABLE pre_contracheque_premissas DROP COLUMN COD_IMPORT_HE;
ALTER TABLE pre_contracheque_premissas DROP COLUMN COD_IMPORT_DSR;
ALTER TABLE pre_contracheque_premissas RENAME TO PRE_CONTRACHEQUE_INFORMACOES;
ALTER TABLE pre_contracheque_informacoes RENAME CONSTRAINT PK_UNIDADE_VALOR_BONUS TO PK_PRE_CONTRACHEQUE_INFORMACOES;
ALTER TABLE pre_contracheque_informacoes ADD CONSTRAINT FK_PRE_CONTRACHEQUE_INFORMACOES_UNIDADE FOREIGN KEY (COD_UNIDADE)
  REFERENCES UNIDADE(CODIGO);
ALTER TABLE pre_contracheque_informacoes DROP COLUMN COD_IMPORT_VALES;
ALTER TABLE pre_contracheque_informacoes ADD COLUMN RECARGA_PARTE_PREMIO BOOLEAN NOT NULL;

-- nova tabela para armazenar os códigos dos itens que devem compor o valor do calculo do premio
CREATE TABLE IF NOT EXISTS PRE_CONTRACHEQUE_CALCULO_PREMIO (
  COD_UNIDADE BIGINT NOT NULL,
  COD_ITEM VARCHAR(255) NOT NULL,
  CONSTRAINT PK_PRE_CONTRACHEQUE_CALCULO_PREMIO PRIMARY KEY (COD_UNIDADE, COD_ITEM),
  CONSTRAINT FK_PRE_CONTRACHEQUE_CALCULO_PREMIO_UNIDADE FOREIGN KEY (COD_UNIDADE)
  REFERENCES UNIDADE(CODIGO)
);


--TABELA PARA RECEBER OS DADOS ENVIADOS PARA COMPOR O PRÉ CONTRACHEQUE
COMMENT ON TABLE PRE_CONTRACHEQUE_ITENS IS 'Itens do pré contracheque';
CREATE TABLE IF NOT EXISTS PRE_CONTRACHEQUE_ITENS (
  COD_UNIDADE     BIGINT       NOT NULL,
  CPF_COLABORADOR BIGINT       NOT NULL,
  MES_REFERENCIA  INT          NOT NULL,
  ANO_REFERENCIA  INT          NOT NULL,
  CODIGO_ITEM     VARCHAR(255),
  DESCRICAO       VARCHAR(255) NOT NULL,
  SUB_DESCRICAO   VARCHAR(255),
  VALOR           REAL         NOT NULL,
  CONSTRAINT PK_PRE_CONTRACHEQUE_ITENS PRIMARY KEY (COD_UNIDADE, CPF_COLABORADOR, MES_REFERENCIA, ANO_REFERENCIA, CODIGO_ITEM),
  CONSTRAINT FK_PRE_CONTRACHEQUE_ITENS_UNIDADE FOREIGN KEY (COD_UNIDADE)
  REFERENCES UNIDADE (CODIGO)
);
-- alterações aplicadas durante a refatoração dos itens que compoe o calculo do premio
ALTER TABLE PRE_CONTRACHEQUE RENAME TO PRE_CONTRACHEQUE_ITENS;
ALTER TABLE PRE_CONTRACHEQUE_ITENS RENAME CONSTRAINT PK_PRE_CONTRACHEQUE TO PK_PRE_CONTRACHEQUE_ITENS;
ALTER TABLE PRE_CONTRACHEQUE_ITENS RENAME CONSTRAINT FK_PRE_CONTRACHEQUE_UNIDADE TO FK_PRE_CONTRACHEQUE_ITENS_UNIDADE;
ALTER TABLE PRE_CONTRACHEQUE_ITENS RENAME CONSTRAINT FK_PRE_CONTRACHEQUE_COLABORADOR TO FK_PRE_CONTRACHEQUE_ITENS_COLABORADOR;

/**
INICIO DA MODELAGEM DO QUIZ
 */
COMMENT ON TABLE QUIZ_MODELO IS 'Modelos de quiz vínculados a uma unidade';
COMMENT ON COLUMN QUIZ_MODELO.DATA_HORA_ABERTURA IS 'Data e hora que o quiz será aberto para realização';
COMMENT ON COLUMN QUIZ_MODELO.DATA_HORA_FECHAMENTO IS 'Data e hora que o quiz será fechado';
COMMENT ON COLUMN QUIZ_MODELO.PORCENTAGEM_APROVACAO IS 'Porcentagem de perguntas que devem ser acertadas sobre o total';
CREATE TABLE IF NOT EXISTS QUIZ_MODELO (
  CODIGO                BIGSERIAL    NOT NULL,
  COD_UNIDADE           BIGINT       NOT NULL,
  NOME                  VARCHAR(255) NOT NULL,
  DESCRICAO             TEXT         NOT NULL,
  DATA_HORA_ABERTURA    TIMESTAMP    NOT NULL,
  DATA_HORA_FECHAMENTO  TIMESTAMP    NOT NULL,
  PORCENTAGEM_APROVACAO REAL         NOT NULL,
  CHECK (DATA_HORA_FECHAMENTO >= DATA_HORA_ABERTURA),
  CONSTRAINT PK_QUIZ_MODELO PRIMARY KEY (CODIGO, COD_UNIDADE),
  CONSTRAINT FK_QUIZ_MODELO_UNIDADE FOREIGN KEY (COD_UNIDADE)
  REFERENCES UNIDADE (CODIGO)
  ON UPDATE CASCADE
);

COMMENT ON TABLE QUIZ_PERGUNTAS IS 'Perguntas de um quiz';
COMMENT ON COLUMN QUIZ_PERGUNTAS.COD_MODELO IS 'Modelo ao qual as perguntas pertencem';
COMMENT ON COLUMN QUIZ_PERGUNTAS.ORDEM IS 'Ordem de exibição da pergunta';
COMMENT ON COLUMN QUIZ_PERGUNTAS.TIPO IS 'Tipo da pergunta, podendo ser de única escolha, múltipla escolha ou ordenamento';
CREATE TABLE IF NOT EXISTS QUIZ_PERGUNTAS (
  COD_MODELO  BIGINT       NOT NULL,
  COD_UNIDADE BIGINT       NOT NULL,
  CODIGO      BIGSERIAL    NOT NULL,
  PERGUNTA    VARCHAR(255) NOT NULL,
  ORDEM       INT          NOT NULL,
  TIPO        VARCHAR(255) NOT NULL,
  URL_IMAGEM  TEXT,
  CONSTRAINT PK_QUIZ_PERGUNTAS PRIMARY KEY (COD_MODELO, COD_UNIDADE, CODIGO),
  CONSTRAINT FK_QUIZ_PERGUNTAS_QUIZ_MODELO FOREIGN KEY (COD_MODELO, COD_UNIDADE)
  REFERENCES QUIZ_MODELO (CODIGO, COD_UNIDADE)
  ON UPDATE CASCADE
);

COMMENT ON TABLE QUIZ_ALTERNATIVA_PERGUNTA IS 'Alternativas das perguntas de um quiz';
COMMENT ON COLUMN QUIZ_ALTERNATIVA_PERGUNTA.ORDEM IS 'Ordem de exibição da alternativa';
COMMENT ON COLUMN QUIZ_ALTERNATIVA_PERGUNTA.CORRETA IS 'Flag que indica se essa é a alternativa correta';
CREATE TABLE IF NOT EXISTS QUIZ_ALTERNATIVA_PERGUNTA (
  COD_MODELO   BIGINT       NOT NULL,
  COD_UNIDADE  BIGINT       NOT NULL,
  COD_PERGUNTA BIGINT       NOT NULL,
  CODIGO       BIGSERIAL    NOT NULL,
  ALTERNATIVA  VARCHAR(255) NOT NULL,
  ORDEM        INT          NOT NULL,
  CORRETA      BOOLEAN      NOT NULL,
  CONSTRAINT PK_QUIZ_ALTERNATIVA_PERGUNTAS PRIMARY KEY (COD_MODELO, COD_UNIDADE, COD_PERGUNTA, CODIGO),
  CONSTRAINT FK_QUIZ_ALTERNATIVA_PERGUNTAS_QUIZ_PERGUNTAS FOREIGN KEY (COD_MODELO, COD_UNIDADE, COD_PERGUNTA)
  REFERENCES QUIZ_PERGUNTAS (COD_MODELO, COD_UNIDADE, CODIGO)
  ON UPDATE CASCADE
);

COMMENT ON TABLE QUIZ IS 'Quiz com perguntas e respostas';
COMMENT ON COLUMN QUIZ.DATA_HORA IS 'Data e hora da realização do quiz';
COMMENT ON COLUMN QUIZ.TEMPO_REALIZACAO IS 'Tempo de realização do quiz';
COMMENT ON COLUMN QUIZ.QT_CORRETAS IS 'Quantidade de respostas corretas que o usuário marcou';
COMMENT ON COLUMN QUIZ.QT_ERRADAS IS 'Quantidade de respostas erradas que o usuário marcou';
CREATE TABLE IF NOT EXISTS QUIZ (
  COD_MODELO       BIGINT    NOT NULL,
  COD_UNIDADE      BIGINT    NOT NULL,
  CODIGO           BIGSERIAL NOT NULL,
  CPF_COLABORADOR  BIGINT    NOT NULL,
  DATA_HORA        TIMESTAMP NOT NULL,
  TEMPO_REALIZACAO BIGINT    NOT NULL,
  QT_CORRETAS      INT       NOT NULL,
  QT_ERRADAS       INT       NOT NULL,
  CONSTRAINT PK_QUIZ PRIMARY KEY (COD_MODELO, COD_UNIDADE, CODIGO),
  CONSTRAINT FK_QUIZ_QUIZ_MODELO FOREIGN KEY (COD_UNIDADE, COD_MODELO)
  REFERENCES QUIZ_MODELO (COD_UNIDADE, CODIGO)
  ON UPDATE CASCADE,
  CONSTRAINT FK_QUIZ_COLABORADOR FOREIGN KEY (CPF_COLABORADOR)
  REFERENCES COLABORADOR (CPF)
  ON UPDATE CASCADE
);

COMMENT ON TABLE QUIZ_RESPOSTAS IS 'Respostas de um quiz';
COMMENT ON COLUMN QUIZ_RESPOSTAS.ORDEM_SELECIONADA IS 'Ordem que a alternativa foi colocada, usado em perguntas de ordenamento';
COMMENT ON COLUMN QUIZ_RESPOSTAS.SELECIONADA IS 'Boolean que indica se a alternativa foi selecionada, usado em perguntas de única ou múltipla escolha';
CREATE TABLE IF NOT EXISTS QUIZ_RESPOSTAS (
  COD_MODELO        BIGINT NOT NULL,
  COD_UNIDADE       BIGINT NOT NULL,
  COD_QUIZ          BIGINT NOT NULL,
  COD_PERGUNTA      BIGINT NOT NULL,
  COD_ALTERNATIVA   BIGINT NOT NULL,
  ORDEM_SELECIONADA INT,
  SELECIONADA       BOOLEAN,
  CONSTRAINT PK_QUIZ_RESPOSTAS PRIMARY KEY
    (COD_MODELO, COD_UNIDADE, COD_QUIZ, COD_PERGUNTA, COD_ALTERNATIVA),
  CONSTRAINT FK_QUIZ_RESPOSTAS_QUIZ_ALTERNATIVA_PERGUNTA FOREIGN KEY
    (COD_MODELO, COD_UNIDADE, COD_PERGUNTA, COD_ALTERNATIVA)
  REFERENCES QUIZ_ALTERNATIVA_PERGUNTA (COD_MODELO, COD_UNIDADE, COD_PERGUNTA, CODIGO)
  ON UPDATE CASCADE,
  CONSTRAINT FK_QUIZ_RESPOSTAS_QUIZ FOREIGN KEY (COD_MODELO, COD_UNIDADE, COD_QUIZ)
  REFERENCES QUIZ (COD_MODELO, COD_UNIDADE, CODIGO)
);

COMMENT ON TABLE QUIZ_MODELO_FUNCAO IS 'Relaciona um modelo de quiz com as funções (cargos) que podem acessar o mesmo';
CREATE TABLE IF NOT EXISTS QUIZ_MODELO_FUNCAO (
  COD_UNIDADE            BIGINT NOT NULL,
  COD_MODELO             BIGINT NOT NULL,
  COD_FUNCAO_COLABORADOR BIGINT NOT NULL,
  CONSTRAINT PK_QUIZ_MODELO_FUNCAO PRIMARY KEY (COD_UNIDADE, COD_MODELO, COD_FUNCAO_COLABORADOR),
  CONSTRAINT FK_QUIZ_MODELO_FUNCAO_QUIZ_MODELO FOREIGN KEY (COD_UNIDADE, COD_MODELO)
  REFERENCES QUIZ_MODELO (COD_UNIDADE, CODIGO)
  ON UPDATE CASCADE,
  CONSTRAINT FK_QUIZ_MODELO_FUNCAO_UNIDADE_FUNCAO FOREIGN KEY (COD_UNIDADE, COD_FUNCAO_COLABORADOR)
  REFERENCES UNIDADE_FUNCAO (COD_UNIDADE, COD_FUNCAO)
);

COMMENT ON TABLE QUIZ_MODELO_TREINAMENTO IS 'Relaciona um quiz com o treinamento do seu conteúdo';
CREATE TABLE IF NOT EXISTS QUIZ_MODELO_TREINAMENTO (
  COD_MODELO_QUIZ BIGINT NOT NULL,
  COD_UNIDADE     BIGINT NOT NULL,
  COD_TREINAMENTO BIGINT NOT NULL,
  CONSTRAINT PK_QUIZ_MODELO_TREINAMENTO PRIMARY KEY (COD_MODELO_QUIZ, COD_UNIDADE, COD_TREINAMENTO),
  CONSTRAINT FK_QUIZ_MODELO_TREINAMENTO_QUIZ_MODELO FOREIGN KEY (COD_UNIDADE, COD_MODELO_QUIZ)
  REFERENCES QUIZ_MODELO (COD_UNIDADE, CODIGO)
  ON UPDATE CASCADE,
  CONSTRAINT FK_QUIZ_MODELO_TREINAMENTO_UNIDADE FOREIGN KEY (COD_UNIDADE)
  REFERENCES UNIDADE (CODIGO)
  ON UPDATE CASCADE
);

COMMENT ON TABLE TREINAMENTO_URL_PAGINAS IS 'Url das páginas de um treinamento';
COMMENT ON COLUMN TREINAMENTO_URL_PAGINAS.URL IS 'Url da imagem da página';
COMMENT ON COLUMN TREINAMENTO_URL_PAGINAS.ORDEM IS 'Ordem de exibição da página';
CREATE TABLE IF NOT EXISTS TREINAMENTO_URL_PAGINAS (
  COD_TREINAMENTO BIGINT       NOT NULL,
  URL             VARCHAR(255) NOT NULL,
  ORDEM           INT          NOT NULL,
  CONSTRAINT PK_TREINAMENTO_URL_PAGINAS PRIMARY KEY (COD_TREINAMENTO, URL),
  CONSTRAINT FK_TREINAMENTO_URL_PAGINAS_TREINAMENTO FOREIGN KEY (COD_TREINAMENTO)
  REFERENCES TREINAMENTO (CODIGO)
  ON UPDATE CASCADE
);

-- TABELA USADA EM CONJUNTO COM A VIEW_MAPA_COLABORADOR, UTILIZADAS PARA CALCULAR PRODUTIVIDADE, INDICADORES E RELATÓRIOS
COMMENT ON TABLE UNIDADE_FUNCAO_PRODUTIVIDADE IS 'Indica quais os códigos dos cargos de motorista e ajudante de cada unidade. Usada em conjunto com a view MAPA_COLABORADOR para calcular a produtividade, indicadores e relatórios';
COMMENT ON COLUMN UNIDADE_FUNCAO_PRODUTIVIDADE.COD_FUNCAO_AJUDANTE IS 'Código da funçao (cargo) de ajudante';
COMMENT ON COLUMN UNIDADE_FUNCAO_PRODUTIVIDADE.COD_FUNCAO_MOTORISTA IS 'Código da funçao (cargo) de motorista';
CREATE TABLE IF NOT EXISTS UNIDADE_FUNCAO_PRODUTIVIDADE (
  COD_UNIDADE          BIGINT NOT NULL,
  COD_FUNCAO_MOTORISTA BIGINT NOT NULL,
  COD_FUNCAO_AJUDANTE  BIGINT,
  UNIQUE (COD_UNIDADE, COD_FUNCAO_MOTORISTA),
  UNIQUE (COD_UNIDADE, COD_FUNCAO_AJUDANTE),
  CONSTRAINT PK_UNIDADE_FUNCAO_PRODUTIVIDADE PRIMARY KEY (COD_UNIDADE, COD_FUNCAO_MOTORISTA, COD_FUNCAO_AJUDANTE),
  CONSTRAINT FK_UNIDADE_FUNCAO_PRODUTIVIDADE_UNIDADE FOREIGN KEY (COD_UNIDADE)
  REFERENCES UNIDADE (CODIGO)
);

COMMENT ON TABLE AMAZON_CREDENTIALS IS 'Armazena as credenciais do S3, usados para enviar fotos do android para a AWS';
CREATE TABLE IF NOT EXISTS AMAZON_CREDENTIALS (
  ACCESS_KEY_ID VARCHAR(255) NOT NULL,
  SECRET_KEY    VARCHAR(255) NOT NULL,
  USER_ID       VARCHAR(255) NOT NULL
);

CREATE TABLE IF NOT EXISTS PNEU_ORDEM (
  posicao_prolog INT NOT NULL,
  ordem_exibicao INT NOT NULL,
  CONSTRAINT PK_PNEU_ORDEM PRIMARY KEY (posicao_prolog);
  CONSTRAINT UNIQUE_PNEU_ORDEM UNIQUE(posicao_prolog, ordem_exibicao)
);

ALTER TABLE PNEU_ORDEM DROP CONSTRAINT PK_PNEU_ORDEM;
ALTER TABLE PNEU_ORDEM ADD CONSTRAINT UNIQUE_PNEU_ORDEM UNIQUE(POSICAO_PROLOG, ordem_exibicao);
ALTER TABLE PNEU_ORDEM ADD CONSTRAINT PK_PNEU_ORDEM PRIMARY KEY (posicao_prolog);


COMMENT ON TABLE VEICULO_DIAGRAMA IS 'Armazena os tipos de diagramas usados no Prolog'
CREATE TABLE IF NOT EXISTS VEICULO_DIAGRAMA (
  CODIGO SMALLINT NOT NULL,
  NOME VARCHAR(255) NOT NULL,
  URL_IMAGEM TEXT,
  CONSTRAINT PK_VEICULO_DIAGRAMA PRIMARY KEY (CODIGO)
);

COMMENT ON TABLE VEICULO_DIAGRAMA_EIXOS IS 'Armazena os detalhes de cada tipo de diagrama'
CREATE TABLE IF NOT EXISTS VEICULO_DIAGRAMA_EIXOS (
  COD_DIAGRAMA SMALLINT NOT NULL,
  TIPO_EIXO CHAR NOT NULL,
  POSICAO SMALLINT NOT NULL,
  QT_PNEUS SMALLINT NOT NULL,
  CONSTRAINT PK_VEICULO_DIAGRAMA_EIXOS PRIMARY KEY (COD_DIAGRAMA, POSICAO),
  CONSTRAINT FK_VEICULO_DIAGRAMA_EIXOS_VEICULO_DIAGRAMA FOREIGN KEY (COD_DIAGRAMA)
  REFERENCES VEICULO_DIAGRAMA (CODIGO),
  CONSTRAINT CHECK_VEICULO_DIAGRAMA_EIXOS_TIPO_EIXO CHECK (TIPO_EIXO = 'D' OR TIPO_EIXO = 'T')
);

COMMENT ON TABLE PNEU_ORDEM_NOMENCLATURA_UNIDADE IS 'Armazena a nomenclatura que cada posição de pneu deve ter para cada unidade, EX: 111 / DD'
CREATE TABLE IF NOT EXISTS PNEU_ORDEM_NOMENCLATURA_UNIDADE (
  COD_TIPO_VEICULO BIGINT NOT NULL,
  COD_UNIDADE BIGINT NOT NULL,
  POSICAO_PROLOG INT NOT NULL,
  NOMENCLATURA VARCHAR(255) NOT NULL,
  CONSTRAINT PK_PNEU_ORDEM_NOMENCLATURA_UNIDADE PRIMARY KEY (COD_TIPO_VEICULO, COD_UNIDADE, POSICAO_PROLOG),
  CONSTRAINT FK_PNEU_ORDEM_NOMENCLATURA_UNIDADE_UNIDADE FOREIGN KEY (COD_UNIDADE)
  REFERENCES UNIDADE(CODIGO),
  CONSTRAINT FK_PNEU_ORDEM_NOMENCLATURA_UNIDADE_PNEU_ORDEM FOREIGN KEY (POSICAO_PROLOG)
  REFERENCES PNEU_ORDEM (POSICAO_PROLOG)
);

CREATE TABLE IF NOT EXISTS prontuario_condutor_consolidado (
  CPF_COLABORADOR      BIGINT       NOT NULL,
  STATUS               VARCHAR(255) NOT NULL,
  MOTIVO               TEXT,
  PONTUACAO            INTEGER      NOT NULL,
  VENCIMENTO_CNH       DATE         NOT NULL,
  DOCUMENTOS_RS        VARCHAR(255),
  DOCUMENTOS_EC        VARCHAR(255),
  DOCUMENTOS_IT        VARCHAR(255),
  PONTUACAO_PONDERADA  REAL       NOT NULL,
  ACIDENTES_FAI        INTEGER      NOT NULL,
  ACIDENTES_LTI        INTEGER      NOT NULL,
  ACIDENTES_MDI        INTEGER      NOT NULL,
  ACIDENTES_MTI        INTEGER      NOT NULL,
  CAPOTAMENTOS         INTEGER      NOT NULL,
  COLISOES             INTEGER      NOT NULL,
  TOMBAMENTOS          INTEGER      NOT NULL,
  MULTAS_LEVE          INTEGER      NOT NULL,
  MULTAS_MEDIA         INTEGER      NOT NULL,
  MULTAS_GRAVE         INTEGER      NOT NULL,
  MULTAS_GRAVISSIMA    INTEGER      NOT NULL,
  SAC_IMPERICIA        INTEGER      NOT NULL,
  SAC_IMPRUDENCIA      INTEGER      NOT NULL,
  SAV_IMPERICIA        INTEGER      NOT NULL,
  SAV_IMPRUDENCIA      INTEGER      NOT NULL,
  ADVERTENCIAS         INTEGER      NOT NULL,
  SUSPENSOES           INTEGER      NOT NULL,
  EXCESSO_VELOCIDADE_1 INTEGER      NOT NULL,
  EXCESSO_VELOCIDADE_2 INTEGER      NOT NULL,
  EXCESSO_VELOCIDADE_3 INTEGER      NOT NULL,
  FORCA_G              INTEGER      NOT NULL,
  FRENAGEM_BRUSCA      INTEGER      NOT NULL,
  DATA_ATUALIZACAO     TIMESTAMP    NOT NULL,
  CONSTRAINT PK_PRONTUARIO_CONDUTOR_CONSOLIDADO PRIMARY KEY (CPF_COLABORADOR)
);

/**
    =======================    VIEWS    =======================
 */



-- VIEW UTILIZADA PARA SUBSTITUIR O USO DA TABELA MAPA_COLABORADOR
COMMENT ON VIEW VIEW_MAPA_COLABORADOR IS 'View utilizada para linkar os mapas relizados por cada colaborador';
CREATE VIEW VIEW_MAPA_COLABORADOR AS
  (SELECT
     M.MAPA,
     C.CPF AS CPF,
     C.cod_unidade
   FROM
     MAPA M
     JOIN UNIDADE_FUNCAO_PRODUTIVIDADE UFP ON UFP.COD_UNIDADE = M.cod_unidade
     JOIN COLABORADOR C ON C.matricula_ambev = M.matricmotorista AND C.cod_funcao = UFP.COD_FUNCAO_MOTORISTA
                           AND C.cod_unidade = M.cod_unidade
   UNION
   SELECT
     M.MAPA,
     C.CPF AS CPF,
     C.cod_unidade
   FROM
     MAPA M
     JOIN UNIDADE_FUNCAO_PRODUTIVIDADE UFP ON UFP.COD_UNIDADE = M.cod_unidade
     JOIN COLABORADOR C ON C.matricula_ambev = M.matricajud1 AND C.cod_funcao = UFP.COD_FUNCAO_AJUDANTE
                           AND C.cod_unidade = M.cod_unidade
   UNION
   SELECT
     M.MAPA,
     C.CPF AS CPF,
     C.cod_unidade
   FROM
     MAPA M
     JOIN UNIDADE_FUNCAO_PRODUTIVIDADE UFP ON UFP.COD_UNIDADE = M.cod_unidade
     JOIN COLABORADOR C ON C.matricula_ambev = M.matricajud2 AND C.cod_funcao = UFP.COD_FUNCAO_AJUDANTE
                           AND C.cod_unidade = M.cod_unidade);

-- VIEW UTILIZADA PARA FAZER O CALCULO DE PREVISÃO DE TROCA DOS PNEUS
COMMENT ON VIEW view_analise_pneus IS 'View utilizada para gerar dados de uso sobre os pneus, esses dados são usados para gerar relatórios';
CREATE VIEW view_analise_pneus AS
  SELECT p.codigo AS "COD PNEU",
         p.status AS "STATUS PNEU",
    p.cod_unidade,
         map.nome AS "MARCA",
         mp.nome AS "MODELO",
         ((((dp.largura || '/'::text) || dp.altura) || ' R'::text) || dp.aro) AS "MEDIDAS",
         dados.qt_afericoes AS "QTD DE AFERIÇÕES",
         to_char((dados.primeira_afericao)::timestamp with time zone, 'DD/MM/YYYY'::text) AS "DTA 1a AFERIÇÃO",
         to_char((dados.ultima_afericao)::timestamp with time zone, 'DD/MM/YYYY'::text) AS "DTA ÚLTIMA AFERIÇÃO",
         dados.total_dias AS "DIAS ATIVO",
         round(
             CASE
             WHEN (dados.total_dias > 0) THEN (dados.total_km / (dados.total_dias)::numeric)
             ELSE NULL::numeric
             END) AS "MÉDIA KM POR DIA",
         round((dados.maior_sulco)::numeric, 2) AS "MAIOR MEDIÇÃO VIDA",
         round((dados.menor_sulco)::numeric, 2) AS "MENOR SULCO ATUAL",
         round((dados.sulco_gasto)::numeric, 2) AS "MILIMETROS GASTOS",
         round((dados.km_por_mm)::numeric, 2) AS "KMS POR MILIMETRO",
         round(((dados.km_por_mm * dados.sulco_restante))::numeric) AS "KMS A PERCORRER",
         trunc(
             CASE
             WHEN ((dados.total_km > (0)::numeric) AND (dados.total_dias > 0) AND ((dados.total_km / (dados.total_dias)::numeric) > (0)::numeric)) THEN ((dados.km_por_mm * dados.sulco_restante) / ((dados.total_km / (dados.total_dias)::numeric))::double precision)
             ELSE (0)::double precision
             END) AS "DIAS RESTANTES",
         CASE
         WHEN ((dados.total_km > (0)::numeric) AND (dados.total_dias > 0) AND ((dados.total_km / (dados.total_dias)::numeric) > (0)::numeric)) THEN ((((dados.km_por_mm * dados.sulco_restante) / ((dados.total_km / (dados.total_dias)::numeric))::double precision))::integer + ('now'::text)::date)
         ELSE NULL::date
         END AS "PREVISÃO DE TROCA"
  FROM (((((pneu p
              JOIN ( SELECT av.cod_pneu,
                       av.cod_unidade,
                       count(av.altura_sulco_central) AS qt_afericoes,
                       (min(a.data_hora))::date AS primeira_afericao,
                       (max(a.data_hora))::date AS ultima_afericao,
                       ((max(a.data_hora))::date - (min(a.data_hora))::date) AS total_dias,
                       max(total_km.total_km) AS total_km,
                       max(GREATEST(av.altura_sulco_central, av.altura_sulco_externo, av.altura_sulco_interno)) AS maior_sulco,
                       min(LEAST(av.altura_sulco_central, av.altura_sulco_externo, av.altura_sulco_interno)) AS menor_sulco,
                       (max(GREATEST(av.altura_sulco_central, av.altura_sulco_externo, av.altura_sulco_interno)) - min(LEAST(av.altura_sulco_central, av.altura_sulco_externo, av.altura_sulco_interno))) AS sulco_gasto,
                       CASE
                       WHEN (
                         CASE
                         WHEN (p_1.vida_atual = p_1.vida_total) THEN (min(LEAST(av.altura_sulco_central, av.altura_sulco_externo, av.altura_sulco_interno)) - erp.sulco_minimo_descarte)
                         WHEN (p_1.vida_atual < p_1.vida_total) THEN (min(LEAST(av.altura_sulco_central, av.altura_sulco_externo, av.altura_sulco_interno)) - erp.sulco_minimo_recapagem)
                         ELSE NULL::real
                         END < (0)::double precision) THEN (0)::real
                       ELSE
                         CASE
                         WHEN (p_1.vida_atual = p_1.vida_total) THEN (min(LEAST(av.altura_sulco_central, av.altura_sulco_externo, av.altura_sulco_interno)) - erp.sulco_minimo_descarte)
                         WHEN (p_1.vida_atual < p_1.vida_total) THEN (min(LEAST(av.altura_sulco_central, av.altura_sulco_externo, av.altura_sulco_interno)) - erp.sulco_minimo_recapagem)
                         ELSE NULL::real
                         END
                       END AS sulco_restante,
                       CASE
                       WHEN (((max(a.data_hora))::date - (min(a.data_hora))::date) > 0) THEN (((max(total_km.total_km))::double precision / max(GREATEST(av.altura_sulco_central, av.altura_sulco_externo, av.altura_sulco_interno))) - min(LEAST(av.altura_sulco_central, av.altura_sulco_externo, av.altura_sulco_interno)))
                       ELSE (0)::double precision
                       END AS km_por_mm
                     FROM ((((afericao_valores av
                                JOIN afericao a ON ((a.codigo = av.cod_afericao)))
                              JOIN pneu p_1 ON (((p_1.codigo = av.cod_pneu) AND (p_1.cod_unidade = av.cod_unidade) AND ((p_1.status)::text = 'EM_USO'::text))))
                             JOIN empresa_restricao_pneu erp ON ((erp.cod_unidade = av.cod_unidade)))
                       JOIN ( SELECT total_km_rodado.cod_pneu,
                                total_km_rodado.cod_unidade,
                                sum(total_km_rodado.km_rodado) AS total_km
                              FROM ( SELECT av_1.cod_pneu,
                                       av_1.cod_unidade,
                                       a_1.placa_veiculo,
                                       (max(a_1.km_veiculo) - min(a_1.km_veiculo)) AS km_rodado
                                     FROM (afericao_valores av_1
                                       JOIN afericao a_1 ON ((a_1.codigo = av_1.cod_afericao)))
                                     GROUP BY av_1.cod_pneu, av_1.cod_unidade, a_1.placa_veiculo) total_km_rodado
                              GROUP BY total_km_rodado.cod_pneu, total_km_rodado.cod_unidade) total_km ON (((total_km.cod_pneu = av.cod_pneu) AND (total_km.cod_unidade = av.cod_unidade))))
                     GROUP BY av.cod_pneu, av.cod_unidade, p_1.vida_atual, p_1.vida_total, erp.sulco_minimo_descarte, erp.sulco_minimo_recapagem) dados ON (((dados.cod_pneu = p.codigo) AND (dados.cod_unidade = p.cod_unidade))))
            JOIN dimensao_pneu dp ON ((dp.codigo = p.cod_dimensao)))
           JOIN unidade u ON ((u.codigo = p.cod_unidade)))
          JOIN modelo_pneu mp ON (((mp.codigo = p.cod_modelo) AND (mp.cod_empresa = u.cod_empresa))))
    JOIN marca_pneu map ON ((map.codigo = mp.cod_marca)))


COMMENT ON VIEW estratificacao_os IS 'View que compila as informações das OS e seus itens';
CREATE VIEW estratificacao_os AS
  SELECT
    os.codigo             AS cod_os,
    os.cod_unidade,
    os.status             AS status_os,
    os.cod_checklist,
    cp.codigo             AS cod_pergunta,
    cp.ordem              AS ordem_pergunta,
    cp.pergunta,
    cp.single_choice,
    NULL :: unknown       AS url_imagem,
    cp.prioridade,
    c.placa_veiculo,
    c.km_veiculo as km,
    v.cod_tipo,
    cap.codigo            AS cod_alternativa,
    cap.alternativa,
    cr.resposta,
    cosi.status_resolucao AS status_item,
    co.nome               AS nome_mecanico,
    cosi.cpf_mecanico,
    c.data_hora,
    ppc.prazo,
    cosi.tempo_realizacao,
    cosi.data_hora_conserto,
    cosi.km               AS km_fechamento,
    cosi.qt_apontamentos,
    cosi.feedback_conserto
  FROM ((((((((checklist c
                 JOIN veiculo v ON (((v.placa) :: TEXT = (c.placa_veiculo) :: TEXT)))
               JOIN checklist_ordem_servico os ON (((C.codigo = os.cod_checklist) AND (C.cod_unidade = os.cod_unidade))))
              JOIN checklist_ordem_servico_itens cosi ON (((os.codigo = cosi.cod_os) AND (os.cod_unidade = cosi.cod_unidade))))
             JOIN checklist_perguntas cp ON ((((cp.cod_unidade = os.cod_unidade) AND (cp.codigo = cosi.cod_pergunta)) AND (cp.cod_checklist_modelo = C.cod_checklist_modelo))))
            JOIN prioridade_pergunta_checklist ppc ON (((ppc.prioridade):: TEXT = (cp.prioridade):: TEXT)))
           JOIN checklist_alternativa_pergunta cap ON (((((cap.cod_unidade = cp.cod_unidade) AND (cap.cod_checklist_modelo = cp.cod_checklist_modelo)) AND (cap.cod_pergunta = cp.codigo)) AND (cap.codigo = cosi.cod_alternativa))))
          JOIN checklist_respostas cr ON ((((((C.cod_unidade = cr.cod_unidade) AND (cr.cod_checklist_modelo = C.cod_checklist_modelo)) AND (cr.cod_checklist = C.codigo)) AND (cr.cod_pergunta = cp.codigo)) AND (cr.cod_alternativa = cap.codigo))))
    LEFT JOIN colaborador co ON ((co.cpf = cosi.cpf_mecanico)));

COMMENT ON VIEW resumo_dados IS 'View utilizada para juntar as datas que tem dados enviados ao sistema, planilhas ambev (2art e tracking)';
CREATE VIEW resumo_dados AS
  SELECT DISTINCT
    m.data AS mapa,
    t.data AS tracking,
    m.cod_unidade,
    t."código_transportadora"
  FROM (mapa m
    LEFT JOIN tracking t ON ((m.data = t.data)))
  ORDER BY m.data DESC, t.data


CREATE VIEW view_produtividade_extrato AS SELECT vmc.cod_unidade,
    c.matricula_ambev,
    m.data,
    vmc.cpf,
    c.nome AS nome_colaborador,
    c.data_nascimento,
    f.nome AS funcao,
    f.codigo AS cod_funcao,
    e.nome AS nome_equipe,
    m.fator,
    m.cargaatual,
    m.entrega,
    m.mapa,
    m.placa,
    m.cxcarreg,
    m.cxentreg,
    m.qthlcarregados,
    m.qthlentregues,
    m.qtnfcarregadas,
    m.qtnfentregues,
    m.entregascompletas,
    m.entregasnaorealizadas,
    m.entregasparciais,
    m.kmprevistoroad,
    m.kmsai,
    m.kmentr,
    to_seconds((m.tempoprevistoroad)::text) AS tempoprevistoroad,
    m.hrsai,
    m.hrentr,
    to_seconds((((m.hrentr - m.hrsai))::time without time zone)::text) AS tempo_rota,
    to_seconds((m.tempointerno)::text) AS tempointerno,
    m.hrmatinal,
    tracking.apontamentos_ok,
    tracking.total_apontamentos AS total_tracking,
    to_seconds((
        CASE
            WHEN ((m.hrsai)::time without time zone < m.hrmatinal) THEN um.meta_tempo_largada_horas
            ELSE ((m.hrsai - (m.hrmatinal)::interval))::time without time zone
        END)::text) AS tempo_largada,
    um.meta_tracking,
    um.meta_tempo_rota_mapas,
    um.meta_caixa_viagem,
    um.meta_dev_hl,
    um.meta_dev_nf,
    um.meta_dev_pdv,
    um.meta_dispersao_km,
    um.meta_dispersao_tempo,
    um.meta_jornada_liquida_mapas,
    um.meta_raio_tracking,
    um.meta_tempo_interno_mapas,
    um.meta_tempo_largada_mapas,
    to_seconds((um.meta_tempo_rota_horas)::text) AS meta_tempo_rota_horas,
    to_seconds((um.meta_tempo_interno_horas)::text) AS meta_tempo_interno_horas,
    to_seconds((um.meta_tempo_largada_horas)::text) AS meta_tempo_largada_horas,
    to_seconds((um.meta_jornada_liquida_horas)::text) AS meta_jornada_liquida_horas,
        CASE
            WHEN ((c.matricula_ambev = m.matricmotorista) AND (((m.entrega)::text <> 'AS'::text) OR ((m.cargaatual)::text = 'Recarga'::text))) THEN (m.vlbateujornmot + m.vlnaobateujornmot)
            WHEN ((c.matricula_ambev = m.matricajud1) AND (((m.entrega)::text <> 'AS'::text) OR ((m.cargaatual)::text = 'Recarga'::text))) THEN ((m.vlbateujornaju + m.vlnaobateujornaju) / m.fator)
            WHEN ((c.matricula_ambev = m.matricajud2) AND (((m.entrega)::text <> 'AS'::text) OR ((m.cargaatual)::text = 'Recarga'::text))) THEN ((m.vlbateujornaju + m.vlnaobateujornaju) / m.fator)
            ELSE (0)::real
        END AS valor_rota,
        CASE
            WHEN ((c.matricula_ambev = m.matricmotorista) AND (((m.entrega)::text <> 'AS'::text) AND ((m.cargaatual)::text = 'Recarga'::text))) THEN m.vlrecargamot
            WHEN ((c.matricula_ambev = m.matricajud1) AND (((m.entrega)::text <> 'AS'::text) AND ((m.cargaatual)::text = 'Recarga'::text))) THEN (m.vlrecargaaju / m.fator)
            WHEN ((c.matricula_ambev = m.matricajud2) AND (((m.entrega)::text <> 'AS'::text) AND ((m.cargaatual)::text = 'Recarga'::text))) THEN (m.vlrecargaaju / m.fator)
            ELSE (0)::real
        END AS valor_recarga,
        CASE
            WHEN ((((c.matricula_ambev = m.matricmotorista) AND ((m.entrega)::text <> 'AS'::text)) AND (m.tempoprevistoroad > um.meta_tempo_rota_horas)) AND ((m.cargaatual)::text <> 'Recarga'::text)) THEN (((m.cxentreg * (view_valor_cx_unidade.valor_cx_motorista_rota)::double precision) / (m.fator)::double precision) - ((m.vlbateujornmot + m.vlnaobateujornmot) + m.vlrecargamot))
            WHEN ((((c.matricula_ambev = m.matricajud1) AND ((m.entrega)::text <> 'AS'::text)) AND (m.tempoprevistoroad > um.meta_tempo_rota_horas)) AND ((m.cargaatual)::text <> 'Recarga'::text)) THEN (((m.cxentreg * (view_valor_cx_unidade.valor_cx_ajudante_rota)::double precision) / (m.fator)::double precision) - (((m.vlbateujornaju + m.vlnaobateujornaju) + m.vlrecargaaju) / m.fator))
            WHEN ((((c.matricula_ambev = m.matricajud2) AND ((m.entrega)::text <> 'AS'::text)) AND (m.tempoprevistoroad > um.meta_tempo_rota_horas)) AND ((m.cargaatual)::text <> 'Recarga'::text)) THEN (((m.cxentreg * (view_valor_cx_unidade.valor_cx_ajudante_rota)::double precision) / (m.fator)::double precision) - (((m.vlbateujornaju + m.vlnaobateujornaju) + m.vlrecargaaju) / m.fator))
            ELSE (0)::double precision
        END AS valor_diferenca_eld,
        CASE
            WHEN ((c.matricula_ambev = m.matricmotorista) AND ((m.entrega)::text = 'AS'::text)) THEN
            CASE
                WHEN (m.entregas = 1) THEN uv.rm_motorista_valor_as_1_entrega
                WHEN (m.entregas = 2) THEN uv.rm_motorista_valor_as_2_entregas
                WHEN (m.entregas = 3) THEN uv.rm_motorista_valor_as_3_entregas
                WHEN (m.entregas > 3) THEN uv.rm_motorista_valor_as_maior_3_entregas
                ELSE (0)::real
            END
            WHEN ((c.matricula_ambev = m.matricajud1) AND ((m.entrega)::text = 'AS'::text)) THEN
            CASE
                WHEN (m.entregas = 1) THEN uv.rm_ajudante_valor_as_1_entrega
                WHEN (m.entregas = 2) THEN uv.rm_ajudante_valor_as_2_entregas
                WHEN (m.entregas = 3) THEN uv.rm_ajudante_valor_as_3_entregas
                WHEN (m.entregas > 3) THEN uv.rm_ajudante_valor_as_maior_3_entregas
                ELSE (0)::real
            END
            WHEN ((c.matricula_ambev = m.matricajud2) AND ((m.entrega)::text = 'AS'::text)) THEN
            CASE
                WHEN (m.entregas = 1) THEN uv.rm_ajudante_valor_as_1_entrega
                WHEN (m.entregas = 2) THEN uv.rm_ajudante_valor_as_2_entregas
                WHEN (m.entregas = 3) THEN uv.rm_ajudante_valor_as_3_entregas
                WHEN (m.entregas > 2) THEN uv.rm_ajudante_valor_as_maior_3_entregas
                ELSE (0)::real
            END
            ELSE (0)::real
        END AS valor_as,
    ((
        CASE
            WHEN (((c.matricula_ambev = m.matricmotorista) AND ((m.entrega)::text <> 'AS'::text)) AND ((m.tempoprevistoroad <= um.meta_tempo_rota_horas) OR ((m.cargaatual)::text = 'Recarga'::text))) THEN ((m.vlbateujornmot + m.vlnaobateujornmot) + m.vlrecargamot)
            WHEN (((c.matricula_ambev = m.matricajud1) AND ((m.entrega)::text <> 'AS'::text)) AND ((m.tempoprevistoroad <= um.meta_tempo_rota_horas) OR ((m.cargaatual)::text = 'Recarga'::text))) THEN (((m.vlbateujornaju + m.vlnaobateujornaju) + m.vlrecargaaju) / m.fator)
            WHEN (((c.matricula_ambev = m.matricajud2) AND ((m.entrega)::text <> 'AS'::text)) AND ((m.tempoprevistoroad <= um.meta_tempo_rota_horas) OR ((m.cargaatual)::text = 'Recarga'::text))) THEN (((m.vlbateujornaju + m.vlnaobateujornaju) + m.vlrecargaaju) / m.fator)
            ELSE (0)::real
        END +
        CASE
            WHEN ((((c.matricula_ambev = m.matricmotorista) AND ((m.entrega)::text <> 'AS'::text)) AND (m.tempoprevistoroad > um.meta_tempo_rota_horas)) AND ((m.cargaatual)::text <> 'Recarga'::text)) THEN ((m.cxentreg * (view_valor_cx_unidade.valor_cx_motorista_rota)::double precision) / (m.fator)::double precision)
            WHEN ((((c.matricula_ambev = m.matricajud1) AND ((m.entrega)::text <> 'AS'::text)) AND (m.tempoprevistoroad > um.meta_tempo_rota_horas)) AND ((m.cargaatual)::text <> 'Recarga'::text)) THEN ((m.cxentreg * (view_valor_cx_unidade.valor_cx_ajudante_rota)::double precision) / (m.fator)::double precision)
            WHEN ((((c.matricula_ambev = m.matricajud2) AND ((m.entrega)::text <> 'AS'::text)) AND (m.tempoprevistoroad > um.meta_tempo_rota_horas)) AND ((m.cargaatual)::text <> 'Recarga'::text)) THEN ((m.cxentreg * (view_valor_cx_unidade.valor_cx_ajudante_rota)::double precision) / (m.fator)::double precision)
            ELSE (0)::double precision
        END) +
        CASE
            WHEN ((c.matricula_ambev = m.matricmotorista) AND ((m.entrega)::text = 'AS'::text)) THEN
            CASE
                WHEN (m.entregas = 1) THEN uv.rm_motorista_valor_as_1_entrega
                WHEN (m.entregas = 2) THEN uv.rm_motorista_valor_as_2_entregas
                WHEN (m.entregas = 3) THEN uv.rm_motorista_valor_as_3_entregas
                WHEN (m.entregas > 3) THEN uv.rm_motorista_valor_as_maior_3_entregas
                ELSE (0)::real
            END
            WHEN ((c.matricula_ambev = m.matricajud1) AND ((m.entrega)::text = 'AS'::text)) THEN
            CASE
                WHEN (m.entregas = 1) THEN uv.rm_ajudante_valor_as_1_entrega
                WHEN (m.entregas = 2) THEN uv.rm_ajudante_valor_as_2_entregas
                WHEN (m.entregas = 3) THEN uv.rm_ajudante_valor_as_3_entregas
                WHEN (m.entregas > 3) THEN uv.rm_ajudante_valor_as_maior_3_entregas
                ELSE (0)::real
            END
            WHEN ((c.matricula_ambev = m.matricajud2) AND ((m.entrega)::text = 'AS'::text)) THEN
            CASE
                WHEN (m.entregas = 1) THEN uv.rm_ajudante_valor_as_1_entrega
                WHEN (m.entregas = 2) THEN uv.rm_ajudante_valor_as_2_entregas
                WHEN (m.entregas = 3) THEN uv.rm_ajudante_valor_as_3_entregas
                WHEN (m.entregas > 2) THEN uv.rm_ajudante_valor_as_maior_3_entregas
                ELSE (0)::real
            END
            ELSE (0)::real
        END) AS valor
   FROM ((((((((view_mapa_colaborador vmc
     JOIN colaborador c ON ((vmc.cpf = c.cpf)))
     JOIN funcao f ON (((f.codigo = c.cod_funcao) AND (f.cod_empresa = c.cod_empresa))))
     JOIN mapa m ON (((m.mapa = vmc.mapa) AND (m.cod_unidade = vmc.cod_unidade))))
     JOIN unidade_metas um ON ((um.cod_unidade = m.cod_unidade)))
     JOIN view_valor_cx_unidade ON ((view_valor_cx_unidade.cod_unidade = m.cod_unidade)))
     JOIN equipe e ON (((e.cod_unidade = c.cod_unidade) AND (c.cod_equipe = e.codigo))))
     LEFT JOIN unidade_valores_rm uv ON ((uv.cod_unidade = m.cod_unidade)))
     LEFT JOIN ( SELECT t.mapa AS tracking_mapa,
            sum(
                CASE
                    WHEN (t.disp_apont_cadastrado <= um_1.meta_raio_tracking) THEN 1
                    ELSE 0
                END) AS apontamentos_ok,
            count(t.disp_apont_cadastrado) AS total_apontamentos
           FROM (tracking t
             JOIN unidade_metas um_1 ON ((um_1.cod_unidade = t."código_transportadora")))
          GROUP BY t.mapa) tracking ON ((tracking.tracking_mapa = m.mapa)))
  WHERE (m.fator > (0)::double precision);
COMMENT ON VIEW view_produtividade_extrato IS 'View que calcula a produtividade individual';

CREATE VIEW view_valor_cx_unidade AS SELECT DISTINCT m.cod_unidade,
    max(round(((m.vlbateujornmot / m.cxentreg))::numeric, 2)) AS valor_cx_motorista_rota,
    max(round(((m.vlbateujornaju / m.cxentreg))::numeric, 2)) AS valor_cx_ajudante_rota
   FROM mapa m
  WHERE ((m.vltotalmapa > (0)::double precision) AND (m.vlbateujornmot > (0)::double precision))
  GROUP BY m.cod_unidade;

CREATE VIEW view_mapa_colaborador AS SELECT m.mapa,
    c.cpf,
    c.cod_unidade
   FROM ((mapa m
     JOIN unidade_funcao_produtividade ufp ON ((ufp.cod_unidade = m.cod_unidade)))
     JOIN colaborador c ON ((((c.matricula_ambev = m.matricmotorista) AND (c.cod_funcao = ufp.cod_funcao_motorista)) AND (c.cod_unidade = m.cod_unidade))))
UNION
 SELECT m.mapa,
    c.cpf,
    c.cod_unidade
   FROM ((mapa m
     JOIN unidade_funcao_produtividade ufp ON ((ufp.cod_unidade = m.cod_unidade)))
     JOIN colaborador c ON ((((c.matricula_ambev = m.matricajud1) AND (c.cod_funcao = ufp.cod_funcao_ajudante)) AND (c.cod_unidade = m.cod_unidade))))
UNION
 SELECT m.mapa,
    c.cpf,
    c.cod_unidade
   FROM ((mapa m
     JOIN unidade_funcao_produtividade ufp ON ((ufp.cod_unidade = m.cod_unidade)))
     JOIN colaborador c ON ((((c.matricula_ambev = m.matricajud2) AND (c.cod_funcao = ufp.cod_funcao_ajudante)) AND (c.cod_unidade = m.cod_unidade))));
COMMENT ON VIEW view_mapa_colaborador IS 'View utilizada para linkar os mapas relizados por cada colaborador';

DROP FUNCTION func_relatorio_consolidado_produtividade(DATE, DATE, BIGINT);
CREATE OR REPLACE FUNCTION func_relatorio_consolidado_produtividade (f_dt_inicial DATE, f_dt_final DATE, f_cod_unidade BIGINT)
  RETURNS TABLE (
  "MATRICULA AMBEV" INT,
    "COLABORADOR" TEXT,
  "FUNÇÃO" TEXT,
  "CXS ENTREGUES" INT,
  "DEV PDV" TEXT,
  "META DEV PDV" TEXT,
  "RECEBE PRÊMIO" TEXT,
    "VALOR PRÊMIO" TEXT,
    "Nº FATOR 1" BIGINT,
    "Nº FATOR 2" BIGINT,
    "Nº ROTAS" BIGINT,
    "VALOR ROTA" TEXT,
    "Nº RECARGAS" BIGINT,
    "VALOR RECARGA" TEXT,
    "Nº ELD" BIGINT,
    "DIFERENÇA ELD" TEXT,
    "Nº AS" BIGINT,
    "VALOR AS" TEXT,
    "Nº MAPAS TOTAL" BIGINT,
    "VALOR TOTAL" TEXT
  ) AS
  $func$
    SELECT
    matricula_ambev,
  initcap(nome_colaborador) AS "COLABORADOR",
  funcao AS "FUNÇÃO",
  trunc(sum(cxentreg))::INT        AS "CXS ENTREGUES",
  REPLACE(round( ((sum(entregasnaorealizadas + entregasparciais))::numeric / sum(entregascompletas+entregasparciais+entregasnaorealizadas)::numeric)*100, 2)::TEXT, '.', ',') as "DEV PDV",
  REPLACE(round((meta_dev_pdv * 100)::numeric, 2)::TEXT, '.', ',') AS "META DEV PDV",
  CASE WHEN round(1 - sum(entregascompletas)/sum(entregascompletas+entregasparciais+entregasnaorealizadas)::numeric, 4) <= meta_dev_pdv THEN
  'SIM' ELSE 'NÃO' END as "RECEBE PRÊMIO",
  REPLACE(  (CASE WHEN round(1 - sum(entregascompletas)/sum(entregascompletas+entregasparciais+entregasnaorealizadas)::numeric, 4) <= meta_dev_pdv AND VPE.cod_funcao = PCI.cod_cargo_motorista THEN
  PCI.bonus_motorista
    WHEN round(1 - sum(entregascompletas)/sum(entregascompletas+entregasparciais+entregasnaorealizadas)::numeric, 4) <= meta_dev_pdv AND VPE.cod_funcao = PCI.cod_cargo_ajudante THEN
  PCI.bonus_ajudante
  ELSE 0 END)::TEXT, '.', ',') as "VALOR PRÊMIO",
  sum(CASE WHEN fator = 1 then 1 else 0 end) as "Nº FATOR 1",
  sum(CASE WHEN fator = 2 then 1 else 0 end) as "Nº FATOR 2",
  sum(CASE WHEN valor_rota > 0 THEN 1 else 0 END) as "Nº ROTAS",
  REPLACE('R$ ' || trunc(sum(valor_rota)::NUMERIC, 2),'.', ',') AS "VALOR ROTA",
  sum(CASE WHEN valor_recarga > 0 THEN 1 else 0 END) as "Nº RECARGAS",
  REPLACE('R$ ' || trunc(sum(valor_recarga) :: NUMERIC, 2),'.', ',') AS "VALOR RECARGA",
  sum(CASE WHEN valor_diferenca_eld > 0 THEN 1 else 0 END) as "Nº ELD",
  REPLACE('R$ ' || trunc(sum(valor_DIFERENCA_ELD) :: NUMERIC, 2), '.', ',') AS "DIFERENÇA ELD" ,
  sum(CASE WHEN valor_as > 0 THEN 1 else 0 END) as "Nº AS",
  REPLACE('R$ ' || trunc(sum(valor_AS) :: NUMERIC, 2), '.', ',') AS "VALOR AS",
  sum(CASE WHEN valor > 0 THEN 1 else 0 END) as "Nº MAPAS TOTAL",
  REPLACE('R$ ' || trunc(sum(valor) :: NUMERIC, 2), '.', ',') AS "VALOR TOTAL"
FROM view_produtividade_extrato vpe
  LEFT JOIN pre_contracheque_informacoes pci on pci.cod_unidade = vpe.cod_unidade
-- WHERE vpe.cod_unidade = 11 AND data BETWEEN '2017-06-21' AND '2017-07-20'
WHERE vpe.cod_unidade = f_cod_unidade AND vpe.data BETWEEN f_dt_inicial AND f_dt_final
GROUP BY matricula_ambev, nome_colaborador, vpe.cod_funcao,funcao, meta_dev_pdv, PCI.cod_cargo_ajudante, PCI.cod_cargo_motorista, PCI.bonus_ajudante, PCI.bonus_motorista
ORDER BY funcao, nome_colaborador;
  $func$ LANGUAGE SQL;