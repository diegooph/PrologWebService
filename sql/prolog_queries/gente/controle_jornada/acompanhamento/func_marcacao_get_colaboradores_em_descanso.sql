CREATE OR REPLACE FUNCTION FUNC_MARCACAO_GET_COLABORADORES_EM_DESCANSO(
  F_COD_UNIDADE         BIGINT,
  F_COD_CARGOS          BIGINT [],
  F_DATA_HORA_ATUAL_UTC TIMESTAMP WITH TIME ZONE)
  RETURNS TABLE(
    NOME_COLABORADOR               TEXT,
    DATA_HORA_INICIO_ULTIMA_VIAGEM TIMESTAMP WITHOUT TIME ZONE,
    DATA_HORA_FIM_ULTIMA_VIAGEM    TIMESTAMP WITHOUT TIME ZONE,
    DURACAO_ULTIMA_VIAGEM          BIGINT,
    TEMPO_DESCANSO_SEGUNDOS        BIGINT,
    FOI_AJUSTADO_INICIO            BOOLEAN,
    FOI_AJUSTADO_FIM               BOOLEAN)
LANGUAGE PLPGSQL
AS $$
DECLARE
  COD_TIPO_JORNADA BIGINT;
  TZ_UNIDADE       TEXT;
BEGIN
  SELECT U.TIMEZONE
  FROM UNIDADE U
  WHERE U.CODIGO = F_COD_UNIDADE
  INTO TZ_UNIDADE;

  SELECT VIT.CODIGO
  FROM VIEW_INTERVALO_TIPO VIT
  WHERE
    VIT.COD_UNIDADE = F_COD_UNIDADE
    AND VIT.TIPO_JORNADA
  INTO COD_TIPO_JORNADA;

  IF COD_TIPO_JORNADA IS NULL OR COD_TIPO_JORNADA <= 0
  THEN RAISE EXCEPTION 'Unidade não possui nenhum tipo de marcação definido como jornada';
  END IF;

  RETURN QUERY
  -- SELECT DISTINCT ON ( EXPRESSION [, ...] ) KEEPS ONLY THE FIRST ROW OF EACH SET OF ROWS WHERE THE GIVEN EXPRESSIONS EVALUATE TO EQUAL.
  -- DOCS: HTTPS://WWW.POSTGRESQL.ORG/DOCS/9.5/SQL-SELECT.HTML#SQL-DISTINCT
  WITH ULTIMA_MARCACAO_JORNADA_COLABORADORES AS (
      SELECT
        DISTINCT ON (F.CPF_COLABORADOR)
        INITCAP(C.NOME)       AS NOME,
        F.DATA_HORA_INICIO    AS DATA_HORA_INICIO,
        F.DATA_HORA_FIM       AS DATA_HORA_FIM,
        F.COD_MARCACAO_INICIO AS COD_MARCACAO_INICIO,
        F.COD_MARCACAO_FIM    AS COD_MARCACAO_FIM,
        F.STATUS_ATIVO_INICIO AS STATUS_ATIVO_INICIO,
        F.STATUS_ATIVO_FIM    AS STATUS_ATIVO_FIM,
        F.FOI_AJUSTADO_INICIO AS FOI_AJUSTADO_INICIO,
        F.FOI_AJUSTADO_FIM    AS FOI_AJUSTADO_FIM
      FROM FUNC_INTERVALOS_AGRUPADOS(F_COD_UNIDADE, NULL, COD_TIPO_JORNADA) F
        JOIN COLABORADOR C
          ON C.CPF = F.CPF_COLABORADOR
      WHERE
        C.COD_FUNCAO = ANY (F_COD_CARGOS)
        AND C.STATUS_ATIVO
      ORDER BY
        F.CPF_COLABORADOR,
        COALESCE(F.COD_MARCACAO_INICIO, F.COD_MARCACAO_FIM) DESC
  )

  SELECT
    UMJC.NOME :: TEXT                                      AS NOME_COLABORADOR,
    UMJC.DATA_HORA_INICIO AT TIME ZONE TZ_UNIDADE          AS DATA_HORA_INICIO_ULTIMA_VIAGEM,
    UMJC.DATA_HORA_FIM AT TIME ZONE TZ_UNIDADE             AS DATA_HORA_FIM_ULTIMA_VIAGEM,
    TO_SECONDS(UMJC.DATA_HORA_FIM - UMJC.DATA_HORA_INICIO) AS DURACAO_ULTIMA_VIAGEM,
    TO_SECONDS(F_DATA_HORA_ATUAL_UTC - UMJC.DATA_HORA_FIM) AS TEMPO_DESCANSO_SEGUNDOS,
    UMJC.FOI_AJUSTADO_INICIO                               AS FOI_AJUSTADO_INICIO,
    UMJC.FOI_AJUSTADO_FIM                                  AS FOI_AJUSTADO_FIM
  FROM ULTIMA_MARCACAO_JORNADA_COLABORADORES UMJC
  WHERE
    -- Precisamos filtrar isso apenas depois de pegarmos a última marcação de jornada de um colaborador,
    -- pois nesse caso pegaremos até mesmo marcações inativas e em andamento. Se fôssemos filtrar na CTE anterior,
    -- poderíamos acabar removendo antes as em andamento e inativas e trazer como última jornada do colaborador uma que
    -- pode ter sido finalizada a até um mês atrás. Ou mesmo uma que está inativa.

    -- Filtramos apenas por fim not null, pois iremos considerar como em descanso, marcações que tem apenas fim.
    UMJC.COD_MARCACAO_FIM IS NOT NULL
    -- Se apenas início ou fim estiverem ativos, queremos trazer essa linha.
    AND (UMJC.STATUS_ATIVO_INICIO OR UMJC.STATUS_ATIVO_FIM);
END;
$$;