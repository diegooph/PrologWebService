CREATE OR REPLACE FUNCTION FUNC_PNEU_TRANSFERENCIA_LISTAGEM(
  F_COD_UNIDADES_ORIGEM  BIGINT [],
  F_COD_UNIDADES_DESTINO BIGINT [],
  F_DATA_INICIAL         DATE,
  F_DATA_FINAL           DATE)
  RETURNS TABLE(
    COD_PROCESSO_TRANSFERENCIA_PNEU    BIGINT,
    REGIONAL_ORIGEM                    TEXT,
    UNIDADE_ORIGEM                     TEXT,
    REGIONAL_DESTINO                   TEXT,
    UNIDADE_DESTINO                    TEXT,
    NOME_COLABORADOR                   TEXT,
    DATA_HORA_TRANSFERENCIA            TIMESTAMP WITHOUT TIME ZONE,
    OBSERVACAO                         TEXT,
    TIPO_PROCESSO_TRANSFERENCIA        TIPO_PROCESSO_TRANSFERENCIA_PNEU,
    COD_PROCESSO_TRANSFERENCIA_VEICULO BIGINT,
    PLACA_TRANSFERIDA                  TEXT)
LANGUAGE PLPGSQL
AS $$
BEGIN
  RETURN QUERY

  WITH REGIONAL_ORIGEM AS (
      SELECT
        R.REGIAO AS REGIAO_ORIGEM,
        U.NOME   AS UNIDADE_ORIGEM,
        U.CODIGO AS COD_UNIDADE_ORIGEM
      FROM REGIONAL R
        JOIN UNIDADE U ON R.CODIGO = u.COD_REGIONAL
      WHERE U.CODIGO = ANY (F_COD_UNIDADES_ORIGEM)
  ),
      REGIONAL_DESTINO AS (
        SELECT
          R.REGIAO AS REGIAO_DESTINO,
          U.NOME   AS UNIDADE_DESTINO,
          U.CODIGO AS COD_UNIDADE_DESTINO
        FROM REGIONAL R
          JOIN UNIDADE U ON R.CODIGO = u.COD_REGIONAL
        WHERE U.CODIGO = ANY (F_COD_UNIDADES_DESTINO)
    )

  SELECT
    PTP.CODIGO                                           AS COD_PROCESSO_TRANSFERENCIA_PNEU,
    RO.REGIAO_ORIGEM :: TEXT                             AS REGIAO_ORIGEM,
    RO.UNIDADE_ORIGEM :: TEXT                            AS UNIDADE_ORIGEM,
    RD.REGIAO_DESTINO :: TEXT                            AS REGIAO_DESTINO,
    RD.UNIDADE_DESTINO :: TEXT                           AS UNIDADE_DESTINO,
    CO.NOME :: TEXT                                      AS NOME_COLABORADOR,
    PTP.DATA_HORA_TRANSFERENCIA_PROCESSO
    AT TIME ZONE TZ_UNIDADE(PTP.COD_UNIDADE_COLABORADOR) AS DATA_HORA_TRANSFERENCIA_PROCESSO,
    PTP.OBSERVACAO :: TEXT                               AS OBSERVACAO,
    PTP.TIPO_PROCESSO_TRANSFERENCIA                      AS TIPO_PROCESSO_TRANSFERENCIA,
    VTI.COD_PROCESSO_TRANSFERENCIA                       AS COD_PROCESSO_TRANSFERENCIA_VEICULO,
    V.PLACA :: TEXT                                      AS PLACA_TRANSFERIDA
  FROM PNEU_TRANSFERENCIA_PROCESSO PTP
    JOIN REGIONAL_ORIGEM RO ON RO.COD_UNIDADE_ORIGEM = PTP.COD_UNIDADE_ORIGEM
    JOIN REGIONAL_DESTINO RD ON RD.COD_UNIDADE_DESTINO = PTP.COD_UNIDADE_DESTINO
    JOIN COLABORADOR CO ON CO.CODIGO = PTP.COD_COLABORADOR
    LEFT JOIN VEICULO_TRANSFERENCIA_VINCULO_PROCESSO_PNEU VTVPP ON PTP.CODIGO = VTVPP.COD_PROCESSO_TRANSFERENCIA_PNEU
    LEFT JOIN VEICULO_TRANSFERENCIA_INFORMACOES VTI ON VTVPP.COD_VEICULO_TRANSFERENCIA_INFORMACOES = VTI.CODIGO
    LEFT JOIN VEICULO V ON VTI.COD_VEICULO = V.CODIGO
  WHERE
    PTP.COD_UNIDADE_ORIGEM = ANY (F_COD_UNIDADES_ORIGEM) AND
    PTP.COD_UNIDADE_DESTINO = ANY (F_COD_UNIDADES_DESTINO) AND
    (DATA_HORA_TRANSFERENCIA_PROCESSO AT TIME ZONE TZ_UNIDADE(PTP.COD_UNIDADE_COLABORADOR)) :: DATE
    BETWEEN F_DATA_INICIAL AND F_DATA_FINAL
  ORDER BY DATA_HORA_TRANSFERENCIA_PROCESSO DESC;
END;
$$;