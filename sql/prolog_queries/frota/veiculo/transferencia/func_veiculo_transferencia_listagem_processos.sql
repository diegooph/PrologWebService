CREATE OR REPLACE FUNCTION FUNC_VEICULO_TRANSFERENCIA_LISTAGEM_PROCESSOS(
  F_COD_UNIDADES_ORIGEM  BIGINT [],
  F_COD_UNIDADES_DESTINO BIGINT [],
  F_DATA_INICIAL         DATE,
  F_DATA_FINAL           DATE)
  RETURNS TABLE(
    COD_PROCESSO_TRANFERENCIA BIGINT,
    NOME_COLABORADOR          TEXT,
    DATA_HORA_REALIZACAO      TIMESTAMP WITHOUT TIME ZONE,
    NOME_UNIDADE_ORIGEM       TEXT,
    NOME_REGIONAL_ORIGEM      TEXT,
    NOME_UNIDADE_DESTINO      TEXT,
    NOME_REGIONAL_DESTINO     TEXT,
    OBSERVACAO                TEXT,
    PLACA_TRANSFERIDA         TEXT,
    QTD_PLACAS_TRANSFERIDAS   BIGINT)
LANGUAGE PLPGSQL
AS $$
BEGIN
  RETURN QUERY
  SELECT
    VTP.CODIGO                                           AS COD_PROCESSO_TRANFERENCIA,
    C.NOME :: TEXT                                       AS NOME_COLABORADOR,
    VTP.DATA_HORA_TRANSFERENCIA_PROCESSO
    AT TIME ZONE TZ_UNIDADE(VTP.COD_UNIDADE_COLABORADOR) AS DATA_HORA_REALIZACAO,
    UO.NOME :: TEXT                                      AS NOME_UNIDADE_ORIGEM,
    RO.REGIAO :: TEXT                                    AS NOME_REGIONAL_ORIGEM,
    UD.NOME :: TEXT                                      AS NOME_UNIDADE_DESTINO,
    RD.REGIAO :: TEXT                                    AS NOME_REGIONAL_DESTINO,
    VTP.OBSERVACAO                                       AS OBSERVACAO,
    V.PLACA :: TEXT                                      AS PLACA_TRANSFERIDA,
    COUNT(VTI.COD_VEICULO)
    OVER (
      PARTITION BY VTP.CODIGO )                          AS QTD_PLACAS_TRANSFERIDAS
  FROM VEICULO_TRANSFERENCIA_PROCESSO VTP
    JOIN VEICULO_TRANSFERENCIA_INFORMACOES VTI ON VTP.CODIGO = VTI.COD_PROCESSO_TRANSFERENCIA
    JOIN VEICULO V ON VTI.COD_VEICULO = V.CODIGO
    JOIN COLABORADOR C ON VTP.COD_COLABORADOR_REALIZACAO = C.CODIGO
    JOIN UNIDADE UO ON VTP.COD_UNIDADE_ORIGEM = UO.CODIGO
    JOIN REGIONAL RO ON UO.COD_REGIONAL = RO.CODIGO
    JOIN UNIDADE UD ON VTP.COD_UNIDADE_DESTINO = UD.CODIGO
    JOIN REGIONAL RD ON UD.COD_REGIONAL = RD.CODIGO
  WHERE VTP.COD_UNIDADE_ORIGEM = ANY (F_COD_UNIDADES_ORIGEM)
        AND VTP.COD_UNIDADE_DESTINO = ANY (F_COD_UNIDADES_DESTINO)
        AND (VTP.DATA_HORA_TRANSFERENCIA_PROCESSO
             AT TIME ZONE TZ_UNIDADE(VTP.COD_UNIDADE_COLABORADOR))::DATE >= F_DATA_INICIAL
        AND (VTP.DATA_HORA_TRANSFERENCIA_PROCESSO
             AT TIME ZONE TZ_UNIDADE(VTP.COD_UNIDADE_COLABORADOR))::DATE <= F_DATA_FINAL
  ORDER BY VTP.DATA_HORA_TRANSFERENCIA_PROCESSO DESC;
END;
$$;