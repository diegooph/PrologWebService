CREATE OR REPLACE FUNCTION FUNC_VEICULO_TRANSFERENCIA_VISUALIZACAO_PROCESSO(F_COD_PROCESSO_TRANSFERENCIA BIGINT)
  RETURNS TABLE(
    COD_PROCESSO_TRANFERENCIA               BIGINT,
    NOME_COLABORADOR                        TEXT,
    DATA_HORA_REALIZACAO                    TIMESTAMP WITHOUT TIME ZONE,
    NOME_UNIDADE_ORIGEM                     TEXT,
    NOME_REGIONAL_ORIGEM                    TEXT,
    NOME_UNIDADE_DESTINO                    TEXT,
    NOME_REGIONAL_DESTINO                   TEXT,
    OBSERVACAO                              TEXT,
    COD_VEICULO_TRANSFERIDO                 BIGINT,
    PLACA_TRANSFERIDA                       TEXT,
    NOME_TIPO_VEICULO_MOMENTO_TRANSFERENCIA TEXT,
    KM_VEICULO_MOMENTO_TRANSFERENCIA        BIGINT,
    COD_PNEU_TRANFERIDO                     BIGINT,
    COD_CLIENTE_PNEU_TRANSFERIDO            TEXT,
    QTD_PLACAS_TRANSFERIDAS                 BIGINT)
LANGUAGE PLPGSQL
AS $$
BEGIN
  RETURN QUERY
  WITH COUNT_PROCESSOS AS (
      SELECT
        VTI.COD_PROCESSO_TRANSFERENCIA AS COD_PROCESSO_TRANSFERENCIA,
        COUNT(VTI.COD_PROCESSO_TRANSFERENCIA) AS QTD_PLACAS_TRANSFERIDAS
      FROM VEICULO_TRANSFERENCIA_INFORMACOES VTI
        JOIN VEICULO_TRANSFERENCIA_PROCESSO VTP ON VTI.COD_PROCESSO_TRANSFERENCIA = VTP.CODIGO
      WHERE VTP.CODIGO = F_COD_PROCESSO_TRANSFERENCIA
      GROUP BY VTI.COD_PROCESSO_TRANSFERENCIA
  )

  SELECT
    VTP.CODIGO                                           AS COD_PROCESSO_TRANFERENCIA,
    C.NOME :: TEXT                                       AS NOME_COLABORADOR,
    VTP.DATA_HORA_TRANSFERENCIA_PROCESSO
    AT TIME ZONE TZ_UNIDADE(VTP.COD_UNIDADE_COLABORADOR) AS DATA_HORA_REALIZACAO,
    UO.NOME :: TEXT                                      AS NOME_UNIDADE_ORIGEM,
    RO.REGIAO :: TEXT                                    AS NOME_REGIONAL_ORIGEM,
    UD.NOME :: TEXT                                      AS NOME_UNIDADE_DESTINO,
    RD.REGIAO :: TEXT                                    AS NOME_REGIONAL_DESTINO,
    VTP.OBSERVACAO                                       AS OBSERVACAO,
    VTI.COD_VEICULO                                      AS COD_VEICULO_TRANSFERIDO,
    V.PLACA :: TEXT                                      AS PLACA_TRANSFERIDA,
    VT.NOME :: TEXT                                      AS NOME_TIPO_VEICULO_MOMENTO_TRANSFERENCIA,
    VTI.KM_VEICULO_MOMENTO_TRANSFERENCIA                 AS KM_VEICULO_MOMENTO_TRANSFERENCIA,
    P.CODIGO                                             AS COD_PNEU_TRANFERIDO,
    P.CODIGO_CLIENTE :: TEXT                             AS COD_CLIENTE_PNEU_TRANSFERIDO,
    CP.QTD_PLACAS_TRANSFERIDAS                           AS QTD_PLACAS_TRANSFERIDAS
  FROM VEICULO_TRANSFERENCIA_PROCESSO VTP
    JOIN VEICULO_TRANSFERENCIA_INFORMACOES VTI ON VTP.CODIGO = VTI.COD_PROCESSO_TRANSFERENCIA
    JOIN VEICULO V ON VTI.COD_VEICULO = V.CODIGO
    JOIN VEICULO_TIPO VT ON VTI.COD_TIPO_VEICULO = VT.CODIGO
    JOIN COLABORADOR C ON VTP.COD_COLABORADOR_REALIZACAO = C.CODIGO
    JOIN UNIDADE UO ON VTP.COD_UNIDADE_ORIGEM = UO.CODIGO
    JOIN REGIONAL RO ON UO.COD_REGIONAL = RO.CODIGO
    JOIN UNIDADE UD ON VTP.COD_UNIDADE_DESTINO = UD.CODIGO
    JOIN REGIONAL RD ON UD.COD_REGIONAL = RD.CODIGO
    JOIN COUNT_PROCESSOS CP ON CP.COD_PROCESSO_TRANSFERENCIA = VTP.CODIGO
    LEFT JOIN VEICULO_TRANSFERENCIA_VINCULO_PROCESSO_PNEU VTVPP ON VTI.CODIGO = VTVPP.COD_VEICULO_TRANSFERENCIA_INFORMACOES
    LEFT JOIN PNEU_TRANSFERENCIA_PROCESSO PTP ON VTVPP.COD_PROCESSO_TRANSFERENCIA_PNEU = PTP.CODIGO
    LEFT JOIN PNEU_TRANSFERENCIA_INFORMACOES PTI ON PTP.CODIGO = PTI.COD_PROCESSO_TRANSFERENCIA
    LEFT JOIN PNEU P ON PTI.COD_PNEU = P.CODIGO
  WHERE VTP.CODIGO = F_COD_PROCESSO_TRANSFERENCIA
  ORDER BY VTI.COD_VEICULO DESC, P.CODIGO ASC;
END;
$$;