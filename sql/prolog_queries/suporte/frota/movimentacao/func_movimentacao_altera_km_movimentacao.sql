-- Sobre:
-- A lógica aplicada nessa function é a seguinte:
-- Após todas as validações, é atualizado a coluna KM_VEICULO na tabela onde possui a placa, cod_movimentacao e
-- tipo: EM_USO.
--
-- Precondições:
-- Código movimentação não pode ser null.
-- Placa não pode ser null.
-- KM não pode ser null e menor que 0.
--
-- Histórico:
-- 2019-07-31 -> Function criada (natanrotta - PL-2131).
-- 2019-09-18 -> Adiciona no schema suporte (natanrotta - PL-2242).
-- 2020-08-14 -> Adiciona chamada para logar execução da function (gustavocnp95 - PL-3066).
-- 2020-10-16 -> Remove restrição de placa ainda estar na empresa da movimentação (luizfp).
-- 2020-10-16 -> Corrige cenário que apontava erro quando origem e destino são EM_USO (luizfp).
CREATE OR REPLACE FUNCTION SUPORTE.FUNC_MOVIMENTACAO_ALTERA_KM_MOVIMENTACAO(F_COD_MOVIMENTACAO BIGINT,
                                                                            F_PLACA VARCHAR(7),
                                                                            F_KM_ATUALIZADO INTEGER,
                                                                            OUT AVISO_KM_ATUALIZADO TEXT) RETURNS TEXT
    SECURITY DEFINER
    LANGUAGE PLPGSQL
AS
$$
DECLARE
    QTD_LINHAS_ATUALIZADAS  BIGINT;
    TIPO                    TEXT    := 'EM_USO';
    MOVIMENTACAO_ATUALIZADA TEXT;
    EXISTE_DESTINO          BOOLEAN := TRUE;
    EXISTE_ORIGEM           BOOLEAN := TRUE;
BEGIN
    PERFORM SUPORTE.FUNC_HISTORICO_SALVA_EXECUCAO();
    PERFORM FUNC_GARANTE_PLACA_CADASTRADA(F_PLACA);
    PERFORM FUNC_GARANTE_NOVO_KM_MENOR_QUE_ATUAL_VEICULO(
                (SELECT V.COD_UNIDADE FROM VEICULO V WHERE V.PLACA = F_PLACA),
                F_PLACA,
                F_KM_ATUALIZADO);

    -- VERIFICA SE KM É NULL OU IGUAL A 0.
    IF (F_KM_ATUALIZADO IS NULL OR F_KM_ATUALIZADO <= 0)
    THEN
        RAISE EXCEPTION 'O VALOR ATRIBUÍDO PARA QUILOMETRAGEM NÃO PODE SER VAZIO OU MENOR OU IGUAL A ZERO(0).';
    END IF;

    -- VERIFICA SE COD_MOVIMENTACAO É NULL.
    IF (F_COD_MOVIMENTACAO IS NULL)
    THEN
        RAISE EXCEPTION 'O VALOR ATRIBUÍDO PARA CÓDIGO MOVIMENTAÇÃO NÃO PODE SER VAZIO.';
    END IF;

    -- VERIFICA SE OS DADOS EXISTEM NA TABELA MOVIMENTACAO_DESTINO E, CASO NÃO ENCONTRE, SETA A FLAG.
    IF NOT EXISTS(
            SELECT MD.COD_MOVIMENTACAO
            FROM MOVIMENTACAO_DESTINO MD
            WHERE MD.COD_MOVIMENTACAO = F_COD_MOVIMENTACAO
              AND MD.PLACA = F_PLACA
              AND MD.TIPO_DESTINO = TIPO
        )
    THEN
        EXISTE_DESTINO = FALSE;
    END IF;

    -- VERIFICA SE OS DADOS EXISTEM NA TABELA MOVIMENTACAO_ORIGEM E, CASO NÃO ENCONTRE, SETA A FLAG.
    IF NOT EXISTS(
            SELECT MO.COD_MOVIMENTACAO
            FROM MOVIMENTACAO_ORIGEM MO
            WHERE MO.COD_MOVIMENTACAO = F_COD_MOVIMENTACAO
              AND MO.PLACA = F_PLACA
              AND MO.TIPO_ORIGEM = TIPO
        )
    THEN
        EXISTE_ORIGEM = FALSE;
    END IF;

    -- VERIFICA SE A MOVIMENTAÇÃO EXISTE NAS TABELAS MOVIMENTACAO_DESTINO E MOVIMENTACAO_ORIGEM.
    IF (EXISTE_DESTINO IS FALSE AND EXISTE_ORIGEM IS FALSE)
    THEN
        RAISE EXCEPTION 'NÃO FOI POSSÍVEL ATUALIZAR A QUILOMETRAGEM! FAVOR VERIFICAR OS SEGUINTES DADOS:
                          CODIGO MOVIMENTAÇÃO: %, PLACA: %',
            F_COD_MOVIMENTACAO, F_PLACA;
    END IF;

    --VERIFICA SE A MOVIMENTAÇÃO EXISTE NAS TABELAS MOVIMENTACAO_DESTINO E MOVIMENTACAO_ORIGEM.
    IF (EXISTE_DESTINO IS FALSE AND EXISTE_ORIGEM IS FALSE)
    THEN
        RAISE EXCEPTION 'NÃO FOI POSSÍVEL ATUALIZAR A QUILOMETRAGEM! FAVOR VERIFICAR OS SEGUINTES DADOS:
                          CODIGO MOVIMENTAÇÃO: %, PLACA: %',
            F_COD_MOVIMENTACAO, F_PLACA;
    END IF;

    -- REALIZA UPDATE NA TABELA CORRESPONDENTE.
    IF (EXISTE_DESTINO AND EXISTE_ORIGEM IS FALSE)
    THEN
        UPDATE MOVIMENTACAO_DESTINO
        SET KM_VEICULO = F_KM_ATUALIZADO
        WHERE COD_MOVIMENTACAO = F_COD_MOVIMENTACAO
          AND PLACA = F_PLACA
          AND TIPO_DESTINO = TIPO;
        MOVIMENTACAO_ATUALIZADA = 'DESTINO';
        GET DIAGNOSTICS QTD_LINHAS_ATUALIZADAS = ROW_COUNT;
    ELSEIF (EXISTE_DESTINO IS FALSE AND EXISTE_ORIGEM)
    THEN
        UPDATE MOVIMENTACAO_ORIGEM
        SET KM_VEICULO = F_KM_ATUALIZADO
        WHERE COD_MOVIMENTACAO = F_COD_MOVIMENTACAO
          AND PLACA = F_PLACA
          AND TIPO_ORIGEM = TIPO;
        MOVIMENTACAO_ATUALIZADA = 'ORIGEM';
        GET DIAGNOSTICS QTD_LINHAS_ATUALIZADAS = ROW_COUNT;
    ELSE
        UPDATE MOVIMENTACAO_DESTINO
        SET KM_VEICULO = F_KM_ATUALIZADO
        WHERE COD_MOVIMENTACAO = F_COD_MOVIMENTACAO
          AND PLACA = F_PLACA
          AND TIPO_DESTINO = TIPO;
        MOVIMENTACAO_ATUALIZADA = 'DESTINO';
        GET DIAGNOSTICS QTD_LINHAS_ATUALIZADAS = ROW_COUNT;

        UPDATE MOVIMENTACAO_ORIGEM
        SET KM_VEICULO = F_KM_ATUALIZADO
        WHERE COD_MOVIMENTACAO = F_COD_MOVIMENTACAO
          AND PLACA = F_PLACA
          AND TIPO_ORIGEM = TIPO;
        MOVIMENTACAO_ATUALIZADA = 'ORIGEM';
        GET DIAGNOSTICS QTD_LINHAS_ATUALIZADAS = ROW_COUNT;
    END IF;

    IF (QTD_LINHAS_ATUALIZADAS > 0)
    THEN
        SELECT 'ATUALIZAÇÃO REALIZADA COM SUCESSO EM MOVIMENTAÇÃO '
                   || MOVIMENTACAO_ATUALIZADA
                   || '! CÓDIGO MOVIMENTAÇÃO: '
                   || F_COD_MOVIMENTACAO
                   || ', PLACA: '
                   || F_PLACA
                   || ', KM_VEICULO: '
                   || F_KM_ATUALIZADO
        INTO AVISO_KM_ATUALIZADO;
    ELSE
        RAISE EXCEPTION 'NÃO FOI POSSÍVEL ATUALIZAR A QUILOMETRAGEM! FAVOR, VERIFICAR OS SEGUINTES DADOS:
                          CODIGO MOVIMENTAÇÃO: %, PLACA: % ' ,
            F_COD_MOVIMENTACAO, F_PLACA;

    END IF;
END
$$;