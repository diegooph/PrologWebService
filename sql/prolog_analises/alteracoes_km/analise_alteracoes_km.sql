CREATE SCHEMA PROLOG_ANALISES;

CREATE TABLE IF NOT EXISTS PROLOG_ANALISES.VEICULO_ALTERACAO_KM (
  CODIGO              BIGSERIAL PRIMARY KEY    NOT NULL,
  PLACA               VARCHAR(7)               NOT NULL,
  COD_UNIDADE_ALOCADO BIGINT                   NOT NULL,
  KM_ANTIGO           BIGINT                   NOT NULL,
  KM_NOVO             BIGINT                   NOT NULL,
  DATA_HORA_EDICAO    TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
  CONSTRAINT FK_VEICULO_ALTERACAO_KM_UNIDADE FOREIGN KEY (COD_UNIDADE_ALOCADO) REFERENCES UNIDADE (CODIGO)
);

CREATE OR REPLACE FUNCTION PROLOG_ANALISES.TG_FUNC_VEICULO_ALTERACAO_KM()
  RETURNS TRIGGER AS $TG_FUNC_VEICULO_ALTERACAO_KM$
BEGIN
  INSERT INTO PROLOG_ANALISES.VEICULO_ALTERACAO_KM (PLACA, COD_UNIDADE_ALOCADO, KM_ANTIGO, KM_NOVO)
  VALUES (OLD.PLACA, OLD.COD_UNIDADE, OLD.KM, NEW.KM);
  RETURN NEW;
END;
$TG_FUNC_VEICULO_ALTERACAO_KM$
LANGUAGE PLPGSQL;

CREATE CONSTRAINT TRIGGER TG_FUNC_VEICULO_ALTERACAO_KM
  AFTER UPDATE
  ON PUBLIC.VEICULO
  FOR EACH ROW
  WHEN (OLD.KM <> NEW.KM)
EXECUTE PROCEDURE PROLOG_ANALISES.TG_FUNC_VEICULO_ALTERACAO_KM();

CREATE OR REPLACE FUNCTION PROLOG_ANALISES.FUNC_VEICULO_ANALISE_KMS_ALTERADOS_POR_EMPRESA()
  RETURNS TABLE(
    COD_EMPRESA                       BIGINT,
    NOME_EMPRESA                      TEXT,
    DIA                               TEXT,
    TOTAL_ATUALIZACOES_KM_DIA_POR_EMPRESA BIGINT,
    TOTAL_EDICOES_KM_DIA_POR_EMPRESA      BIGINT,
    TOTAL_ATUALIZACOES_KM_DIA_TODAS_EMPRESAS   NUMERIC,
    TOTAL_EDICOES_KM_DIA_TODAS_EMPRESAS        NUMERIC)
LANGUAGE PLPGSQL
AS $$
BEGIN
  RETURN QUERY
  WITH ALTERACOES_KM_EMPRESA AS (
      SELECT
        E.CODIGO                             AS COD_EMPRESA,
        E.NOME :: TEXT                       AS NOME_EMPRESA,
        VAK.DATA_HORA_EDICAO :: DATE         AS DIA,
        COUNT(*)                             AS TOTAL_ATUALIZACOES_KM_DIA_POR_EMPRESA,
        COUNT(*)
          FILTER (WHERE KM_NOVO < KM_ANTIGO) AS TOTAL_EDICOES_KM_DIA_POR_EMPRESA
      FROM PROLOG_ANALISES.VEICULO_ALTERACAO_KM VAK
        JOIN PUBLIC.UNIDADE U ON VAK.COD_UNIDADE_ALOCADO = U.CODIGO
        JOIN PUBLIC.EMPRESA E ON U.COD_EMPRESA = E.CODIGO
      GROUP BY E.CODIGO, VAK.DATA_HORA_EDICAO :: DATE
  )

  SELECT
    AKE.COD_EMPRESA                       AS COD_EMPRESA,
    AKE.NOME_EMPRESA                      AS NOME_EMPRESA,
    TO_CHAR(AKE.DIA, 'DD/MM/YYYY')        AS DIA,
    AKE.TOTAL_ATUALIZACOES_KM_DIA_POR_EMPRESA AS TOTAL_ATUALIZACOES_KM_DIA_POR_EMPRESA,
    AKE.TOTAL_EDICOES_KM_DIA_POR_EMPRESA      AS TOTAL_EDICOES_KM_DIA_POR_EMPRESA,
    SUM(AKE.TOTAL_ATUALIZACOES_KM_DIA_POR_EMPRESA)
    OVER (
      PARTITION BY AKE.DIA )              AS TOTAL_ATUALIZACOES_KM_DIA_TODAS_EMPRESAS,
    SUM(AKE.TOTAL_EDICOES_KM_DIA_POR_EMPRESA)
    OVER (
      PARTITION BY AKE.DIA )              AS TOTAL_EDICOES_KM_DIA_TODAS_EMPRESAS
  FROM ALTERACOES_KM_EMPRESA AKE
  ORDER BY AKE.DIA DESC, AKE.NOME_EMPRESA ASC;
END;
$$;

CREATE OR REPLACE FUNCTION PROLOG_ANALISES.FUNC_VEICULO_ANALISE_KMS_ALTERADOS_CONSOLIDADO()
  RETURNS TABLE(
    DIA                             TEXT,
    TOTAL_ATUALIZACOES_KM_DIA_TODAS_EMPRESAS BIGINT,
    TOTAL_EDICOES_KM_DIA_TODAS_EMPRESAS      BIGINT)
LANGUAGE PLPGSQL
AS $$
BEGIN
  RETURN QUERY
  SELECT
    TO_CHAR(VAK.DATA_HORA_EDICAO :: DATE, 'DD/MM/YYYY') AS DIA,
    COUNT(*)                                            AS TOTAL_EDICOES_KM_DIA_TODAS_EMPRESAS,
    COUNT(*)
      FILTER (WHERE KM_NOVO < KM_ANTIGO)                AS TOTAL_EDICOES_KM_DIA_TODAS_EMPRESAS
  FROM PROLOG_ANALISES.VEICULO_ALTERACAO_KM VAK
  GROUP BY VAK.DATA_HORA_EDICAO :: DATE
  ORDER BY VAK.DATA_HORA_EDICAO :: DATE DESC;
END;
$$;