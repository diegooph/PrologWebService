BEGIN TRANSACTION;
--######################################################################################################################
--######################################################################################################################
--################## ESTE DOCUMENTO REÚNE INFORMAÇÕES E ALTERAÇÕES NA ESTRUTURA DE CHECKLIST ###########################
--######################################################################################################################
--######################################################################################################################
-- Introdução
-- Minha ideia foi desmembrar as informações pertinentes a modelos de checklist de forma que não seja necessário
-- processar toda a checklist respostas.
--
-- Para isso criei duas tabelas auxiliares que irão facilitar o processo de identificação e modelos diferentes com base
-- nos modelos e alternativas presentes nas respostas.

--######################################################################################################################
-- Termina de inserir na tabela base.
DO
$body$
    DECLARE
        BATCH_INIT_INCLUSIVE BIGINT := 1600000;
    BEGIN

        WITH CHECKLISTS AS (
            SELECT DISTINCT(CR.COD_CHECKLIST)                                        AS COD_CHECKLIST,
                           CR.COD_CHECKLIST_MODELO                                   AS COD_CHECKLIST_MODELO,
                           ARRAY_AGG(CR.COD_ALTERNATIVA ORDER BY CR.COD_ALTERNATIVA) AS ALTERNATIVAS
            FROM CHECKLIST_RESPOSTAS CR
            WHERE CR.COD_CHECKLIST >= BATCH_INIT_INCLUSIVE
            GROUP BY CR.COD_CHECKLIST, COD_CHECKLIST_MODELO
            ORDER BY CR.COD_CHECKLIST)
        INSERT
        INTO MIGRATION_CHECKLIST.BASE_CHECKLIST_ALTERNATIVAS_AGG (COD_CHECKLIST, ALTERNATIVAS, COD_CHECKLIST_MODELO)
        SELECT C.COD_CHECKLIST, C.ALTERNATIVAS, C.COD_CHECKLIST_MODELO
        FROM CHECKLISTS C
        ORDER BY COD_CHECKLIST_MODELO;
    END;
$body$
LANGUAGE 'plpgsql';

--######################################################################################################################
-- CRIA TABELA AUXILIAR COM OS MODELOS DE CHECKLIST DE ACORDO COM AS ALTERNATIVAS
CREATE TABLE MIGRATION_CHECKLIST.MIGRATION_CHECKLIST_MODELOS
(
    COD_CHECKLIST_MODELO                     BIGINT,
    ORDEM_VERSAO                             INTEGER,
    COD_CHECKLIST_MODELO_VERSAO              BIGINT,
    ALTERNATIVAS                             TEXT,
    COD_CHECKLIST_PRIMEIRA_REALIZACAO_MODELO BIGINT,
    CHECKLISTS_REALIZADOS_VERSAO             BIGINT[]
);

CREATE OR REPLACE FUNCTION MIGRATION_CHECKLIST.FUNC_CHECKLIST_SETAR_VERSAO_MODELO()
    RETURNS TRIGGER
    LANGUAGE PLPGSQL
AS
$FUNC$
DECLARE
    QTD_LINHAS_ATUALIZADAS BIGINT;
BEGIN
    UPDATE CHECKLIST_DATA
    SET COD_VERSAO_CHECKLIST_MODELO = NEW.COD_CHECKLIST_MODELO_VERSAO
    WHERE CODIGO = ANY (OLD.CHECKLISTS_REALIZADOS_VERSAO);

    GET DIAGNOSTICS QTD_LINHAS_ATUALIZADAS = ROW_COUNT;

    IF QTD_LINHAS_ATUALIZADAS IS NULL OR QTD_LINHAS_ATUALIZADAS <> ARRAY_LENGTH(OLD.CHECKLISTS_REALIZADOS_VERSAO, 1)
    THEN
        RAISE EXCEPTION 'Erro ao setar versão na tabela CHECKLIST_DATA';
    END IF;

    RETURN NEW;
END
$FUNC$;

CREATE TRIGGER TG_FUNC_CHECKLIST_SETAR_VERSAO_MODELO
    AFTER UPDATE OF COD_CHECKLIST_MODELO_VERSAO
    ON MIGRATION_CHECKLIST.MIGRATION_CHECKLIST_MODELOS
    FOR EACH ROW
EXECUTE PROCEDURE MIGRATION_CHECKLIST.FUNC_CHECKLIST_SETAR_VERSAO_MODELO();


WITH MODELOS AS (
    SELECT * FROM MIGRATION_CHECKLIST.BASE_CHECKLIST_ALTERNATIVAS_AGG BCAA
    ORDER BY BCAA.COD_CHECKLIST)
INSERT
INTO MIGRATION_CHECKLIST.MIGRATION_CHECKLIST_MODELOS (ALTERNATIVAS, COD_CHECKLIST_MODELO)
SELECT DISTINCT(M.ALTERNATIVAS), M.COD_CHECKLIST_MODELO
FROM MODELOS M
ORDER BY COD_CHECKLIST_MODELO;

--######################################################################################################################
-- CRIA TABELA AUXILIAR COM OS CHECKLISTS E SUAS ALTERNATIVAS

CREATE TABLE MIGRATION_CHECKLIST.MIGRATION_CHECKLIST (
    COD_CHECKLIST BIGINT,
    COD_CHECKLIST_MODELO BIGINT,
    ALTERNATIVAS TEXT
);

CREATE INDEX IDX_MIGRATION_CHECKLIST_ALTERNATIVAS_COD_CHECKLIST_MODELO ON migration_checklist.migration_checklist (alternativas, cod_checklist_modelo);

WITH CHECKLISTS AS (
    SELECT * FROM MIGRATION_CHECKLIST.BASE_CHECKLIST_ALTERNATIVAS_AGG BCAA
    ORDER BY BCAA.COD_CHECKLIST)
INSERT
INTO MIGRATION_CHECKLIST.MIGRATION_CHECKLIST (COD_CHECKLIST, ALTERNATIVAS, COD_CHECKLIST_MODELO)
SELECT C.COD_CHECKLIST, C.ALTERNATIVAS, C.COD_CHECKLIST_MODELO
FROM CHECKLISTS C
ORDER BY COD_CHECKLIST_MODELO;


-- SETA OS CÓDIGOS DE CHECKLIST REALIZADOS DE ACORDO COM CADA MODELO
UPDATE MIGRATION_CHECKLIST.MIGRATION_CHECKLIST_MODELOS MCM
SET CHECKLISTS_REALIZADOS_VERSAO = (SELECT ARRAY_AGG(DISTINCT COD_CHECKLIST)
                                    FROM MIGRATION_CHECKLIST.MIGRATION_CHECKLIST MC
                                    WHERE MC.ALTERNATIVAS = MCM.ALTERNATIVAS
                                      AND MC.COD_CHECKLIST_MODELO = MCM.COD_CHECKLIST_MODELO);

-- ATUALIZA O CÓDIGO CHECKLIST DA PRIMEIRA REALIZAÇÃO POR MODELO
UPDATE MIGRATION_CHECKLIST.MIGRATION_CHECKLIST_MODELOS
SET COD_CHECKLIST_PRIMEIRA_REALIZACAO_MODELO = CHECKLISTS_REALIZADOS_VERSAO[1];

-- SETA A ORDEM DE VERSÃO DE CADA MODELO
WITH PRIMEIROS AS (
SELECT
      MC.COD_CHECKLIST_MODELO AS COD_CHECKLIST_MODELO,
      MC.ALTERNATIVAS AS ALTERNATIVAS,
      FIRST_VALUE(CD.DATA_HORA) OVER (PARTITION BY MC.ALTERNATIVAS ORDER BY CD.DATA_HORA ASC) AS DATA_HORA
FROM MIGRATION_CHECKLIST.MIGRATION_CHECKLIST MC
JOIN CHECKLIST_DATA CD ON MC.COD_CHECKLIST = CD.CODIGO
ORDER BY CD.DATA_HORA ASC),

ORDENADOS AS (
SELECT
       PRIMEIROS.COD_CHECKLIST_MODELO,
       PRIMEIROS.ALTERNATIVAS,
       ROW_NUMBER() OVER (PARTITION BY COD_CHECKLIST_MODELO) AS ORDEM
FROM PRIMEIROS
GROUP BY COD_CHECKLIST_MODELO, ALTERNATIVAS, DATA_HORA
ORDER BY COD_CHECKLIST_MODELO, DATA_HORA)
UPDATE MIGRATION_CHECKLIST.MIGRATION_CHECKLIST_MODELOS MCM
SET ORDEM_VERSAO = (SELECT ORDEM FROM ORDENADOS
WHERE MCM.ALTERNATIVAS = ORDENADOS.ALTERNATIVAS
    AND MCM.COD_CHECKLIST_MODELO = ORDENADOS.COD_CHECKLIST_MODELO);
--######################################################################################################################
END TRANSACTION;