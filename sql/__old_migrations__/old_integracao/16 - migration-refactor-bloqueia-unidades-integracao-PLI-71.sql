BEGIN TRANSACTION;
-- PLI-71
CREATE TABLE IF NOT EXISTS INTEGRACAO.EMPRESA_UNIDADES_INTEGRACAO_BLOQUEADA
(
    CODIGO                BIGSERIAL NOT NULL,
    COD_EMPRESA           BIGINT    NOT NULL,
    COD_UNIDADE_BLOQUEADA BIGINT    NOT NULL,
    CONSTRAINT PK_EMPRESA_UNIDADES_INTEGRACAO_BLOQUEADAS PRIMARY KEY (CODIGO),
    CONSTRAINT UNIQUE_UNIDADE_INTEGRACAO_BLOQUEADA UNIQUE (COD_EMPRESA, COD_UNIDADE_BLOQUEADA),
    CONSTRAINT FK_EMPRESA_UNIDADE_INTEGRACAO_BLOQUEADA_EMPRESA
        FOREIGN KEY (COD_EMPRESA) REFERENCES INTEGRACAO.TOKEN_INTEGRACAO (COD_EMPRESA),
    CONSTRAINT FK_EMPRESA_UNIDADE_INTEGRACAO_BLOQUEADA_UNIDADE
        FOREIGN KEY (COD_EMPRESA, COD_UNIDADE_BLOQUEADA) REFERENCES PUBLIC.UNIDADE (COD_EMPRESA, CODIGO)
);

COMMENT ON TABLE INTEGRACAO.EMPRESA_UNIDADES_INTEGRACAO_BLOQUEADA
    IS 'Tabela que contém as unidades que estão com a integração bloqueada.';

COMMENT ON CONSTRAINT FK_EMPRESA_UNIDADE_INTEGRACAO_BLOQUEADA_EMPRESA
    ON INTEGRACAO.EMPRESA_UNIDADES_INTEGRACAO_BLOQUEADA
    IS 'Constraint para garantir que nenhuma empresa nesta tabela não possua token e consequentemente integração.';

COMMENT ON CONSTRAINT FK_EMPRESA_UNIDADE_INTEGRACAO_BLOQUEADA_UNIDADE
    ON INTEGRACAO.EMPRESA_UNIDADES_INTEGRACAO_BLOQUEADA
    IS 'Constraint para garantir que nenhuma unidade nesta tabela não pertença a empresas integradas.';

-- Cria function para buscar unidades bloqueadas
CREATE OR REPLACE FUNCTION INTEGRACAO.FUNC_GERAL_BUSCA_UNIDADES_BLOQUEADAS_INTEGRACAO(F_USER_TOKEN TEXT)
    RETURNS TABLE
            (
                COD_UNIDADE_BLOQUEADA BIGINT
            )
    LANGUAGE SQL
AS
$$
SELECT EUIB.COD_UNIDADE_BLOQUEADA
FROM INTEGRACAO.EMPRESA_UNIDADES_INTEGRACAO_BLOQUEADA EUIB
WHERE EUIB.COD_EMPRESA = (SELECT COD_EMPRESA
                          FROM TOKEN_AUTENTICACAO TA
                                   JOIN COLABORADOR C ON C.CODIGO = TA.COD_COLABORADOR
                          WHERE TA.TOKEN = F_USER_TOKEN)
$$;

END TRANSACTION;